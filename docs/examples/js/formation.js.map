{"version":3,"sources":["webpack://Formation/webpack/bootstrap","webpack://Formation/./node_modules/events/events.js","webpack://Formation/./node_modules/stampit/dist/stampit.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/collection/forEach.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/arrayEach.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/baseEach.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/baseFor.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/baseForOwn.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/baseProperty.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/bindCallback.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/createBaseEach.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/createBaseFor.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/createForEach.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/getLength.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/getNative.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/isArrayLike.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/isIndex.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/isLength.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/isObjectLike.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/shimKeys.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/internal/toObject.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/lang/isArguments.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/lang/isArray.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/lang/isFunction.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/lang/isNative.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/lang/isObject.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/object/keys.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/object/keysIn.js","webpack://Formation/./node_modules/stampit/node_modules/lodash/utility/identity.js","webpack://Formation/./node_modules/supermixer/dist/index.js","webpack://Formation/./node_modules/supermixer/dist/mixer.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/arrayCopy.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/arrayEach.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/baseAssign.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/baseClone.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/baseCopy.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/baseFor.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/baseForOwn.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/baseProperty.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/bindCallback.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/bufferClone.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/createBaseFor.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/createForIn.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/createForOwn.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/getLength.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/getNative.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/initCloneArray.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/initCloneByTag.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/initCloneObject.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/isArrayLike.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/isIndex.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/isLength.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/isObjectLike.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/shimKeys.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/internal/toObject.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/cloneDeep.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/isArguments.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/isArray.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/isFunction.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/isNative.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/isObject.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/lang/isUndefined.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/object/forIn.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/object/forOwn.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/object/keys.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/object/keysIn.js","webpack://Formation/./node_modules/supermixer/node_modules/lodash/utility/identity.js","webpack://Formation/(webpack)/buildin/global.js","webpack://Formation/./src/components/button.js","webpack://Formation/./src/components/form.js","webpack://Formation/./src/event-handlers/body-events-handler.js","webpack://Formation/./src/event-handlers/event-definitions-stamp.js","webpack://Formation/./src/event-handlers/form-events-handler.js","webpack://Formation/./src/formation-stamp.js","webpack://Formation/./src/formation.js","webpack://Formation/./src/logging/console.js","webpack://Formation/./src/rules/checkbox-default-rules.js","webpack://Formation/./src/rules/radio-default-rules.js","webpack://Formation/./src/rules/rule-set.js","webpack://Formation/./src/rules/rule.js","webpack://Formation/./src/rules/select-default-rules.js","webpack://Formation/./src/rules/text-default-rules.js","webpack://Formation/./src/utilities/dom-navigation.js","webpack://Formation/./src/utilities/node-event-emitter-stamp.js","webpack://Formation/./src/utilities/validity-checks.js"],"names":["consoleLoggerStamp","require","domNavigationStamp","eventDefinitionsStamp","stampit","buttonComponentStamp","refs","button","nodeEvents","loadingText","loadingTextDataKey","methods","exists","isSubmitting","hasAttribute","submittingStateDataKey","parseInt","getAttribute","setEnabled","enable","enableOrDisableElement","setSubmitting","submitting","setAttribute","removeAttribute","addHandleFormSubmitListener","on","getNodeFormSubmitEvent","handleFormSubmitEvent","event","log","toString","blurEvent","CustomEvent","getBlurEventName","bubbles","cancelable","dispatchEvent","init","__continueButtonSpinnerHTML","getButtonLoadingTextWithSpinnerHTML","setLoadingHTML","module","exports","compose","checkboxDefaultRulesStamp","radioDefaultRulesStamp","selectDefaultRulesStamp","textDefaultRulesStamp","formComponentStamp","getFormComponentOfCurrentElement","registerRule","elementType","rule","isFormationRule","TypeError","getRuleSetBySupportedElementType","add","isFormComponent","__form","getForm","isFormValid","validAttrKey","__initialized","initialized","__formAlreadyInitialized","alreadyInit","formComponent","form","e","info","initForm","warn","__setRequiredFields","__setOptionalFields","__initFields","__initFormButtons","__requiredFields","getRequiredFields","findRequiredFields","length","Error","__optionalFields","getOptionalFields","findOptionalFields","forEach","required","optional","__submitButton","getSubmitButton","findSubmitButton","initLogging","getLogConsole","__supportedElementTypesMap","getSupportedElementTypesMap","__supportedElementTypesRuleSets","getSupportedElementTypeRuleSets","type","setSupportedElementTypeRuleSet","rules","bodyEventsHandlerStamp","body","addDefaultEventHandlers","addEventListener","getKeyUpEventName","bodyKeyUpHandler","setEventsInitialized","indexOf","key","elementIsCustomRadioOrCheckboxWidget","target","click","__eventsInitialized","getEventsInitialized","callStackCurrent","newVal","__checkFormValidityEventName","getCheckFormValidityEventName","__changeEventName","getChangeEventName","__keyPressEventName","getKeyPressEventName","__keyUpEventName","__focusEventName","getFocusEventName","__blurEventName","__mouseEnterEventName","getMouseEnterEventName","__mouseLeaveEventName","getMouseLeaveEventName","__touchStartEventName","getTouchStartEventName","__validationEventName","getValidationEventName","__setValidationFlagEventName","getSetValidationFlagEventName","__validityChangedEventName","getValidityChangedEventName","formEventsHandlerStamp","formSubmitHandler","emit","checkFormValidityHandler","submitButton","processSubmitButton","visibleRequiredFields","filter","visibleEnabledFilter","validRequiredFields","matches","validAfterRuleCheck","setValidationFlagEvent","detail","checkBoxChangeHandler","checkbox","showOrHideLinkedElement","checked","validationEvent","radioChangeHandler","radio","getAllCheckboxesOrRadiosByName","r","selectChangeHandler","select","inputTextareaChangeHandler","inputTextareaKeyUpHandler","inputFocusHandler","input","inputElementValidationHandler","triggeringFormInput","validate","checkValidityEvent","setValidationFlagHandler","element","getInputType","elementToCheckAndSetAttr","getCheckboxOrRadioContainer","validBeforeRuleCheck","validityChanged","validityChangedEvent","validateFormFields","fields","Array","from","concat","field","triggerValidationCheck","getAllInputElementsToValidate","lowerTag","tagName","toLowerCase","registeredRules","process","isFormEventHandler","__inputTypes","getInputTypesArr","__formEventsAlreadyInitialized","formEventsHandler","formEventsAlreadyInitialized","initFormComponent","__inputElementTypesToValidate","inputElementTypesToValidate","join","querySelectorAll","joinStr","allInputElementsSelector","textElementsSelector","map","currentForm","currentFormParent","parentNode","mouseMoveTouchEvents","mte","ruleStamp","formationStamp","formationDataAttrKey","readyDocument","enterFormation","detectForms","getForms","size","bodyEventsHandler","document","initBodyEvents","initForms","has","get","formationComponent","createFormationComponent","set","exception","error","createFormationRule","name","callback","ruleName","ruleCallbackMethod","getSupportedElementTypes","registerRuleFunc","removeEventListener","debug","getDebug","setDebug","getNodeSetDebugEvent","__forms","Map","findCurrentFormByTarget","forms","getElementsByTagName","formFilter","__supportedElementTypes","__bodyEventsHandler","formationLoggerStamp","eventEmitterStamp","eventEmitter","Formation","toggleableConsoleStamp","console","message","logConsole","setLogConsole","initial","ruleSetStamp","dataFvDefault","attribute","checkedCheckboxes","c","dataFvMinSelected","attributeOwner","getAttributeOwner","minSelected","isNaN","dataFvMaxSelected","maxSelected","__rules","getRules","checkedRadios","validityChecksStamp","isFormationRuleSet","push","ruleAttribute","value","trim","dataFvMinLength","minChars","dataFvMaxLength","maxChars","dataFvFormat","format","valid","trimmedVal","isValidZip","isValidEmail","isValidPhone","formatMatch","match","formatAsRegex","RegExp","test","dataFvMatchField","matchOtherFieldID","otherField","getElementById","otherFieldTrimmedVal","linkedInputAttrKey","toggleOverrideTextAttrKey","groupedElementsContainerAttrKey","optionalFieldsSelector","requiredFieldsSelector","submitButtonSelector","getFormationSelector","closest","selector","nodeType","ELEMENT_NODE","parent","classList","contains","querySelector","getInputElementLabel","getLinkedElement","source","linkedElementID","linkedElement","remove","showOrHideElement","show","toggle","linkedInputFormGroup","hasFormGroup","enableOrDisableLinkedElement","enableAndShow","elementHandlesHidden","showEnableLinkedElement","hideDisableLinkedElement","removeHidden","includeHidden","clearValue","hiddenOrDisabled","EventEmitter","convertConstructor","eventEmitterEventsStamp","__nodeSetDebugEventName","__nodeFormSubmitEventName","validityCheckStamp","isValidNumeric","strToTest","part","multi"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;AC7SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED,sCAAsC,uCAAuC,kBAAkB;;AAE/F;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,iEAAiE,aAAa;AAC9E;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;AAEA;AACA,2FAA2F,eAAe;AAC1G;AACA;;AAEA;AACA;AACA;AACA,wFAAwF,eAAe;AACvG;AACA;;AAEA;AACA;AACA;AACA;AACA,yFAAyF,eAAe;AACxG;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2FAA2F,eAAe;AAC1G;AACA;;AAEA;AACA;AACA;AACA,2FAA2F,eAAe;AAC1G;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,wFAAwF,eAAe;AACvG;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,yEAAyE,eAAe;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,OAAO,0CAA0C,6BAA6B;AAC1F,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,eAAe;AAC3B,YAAY,eAAe;AAC3B,YAAY,OAAO;AACnB,YAAY,kBAAkB;AAC9B,YAAY,eAAe;AAC3B,YAAY,4BAA4B;AACxC,YAAY,gBAAgB;AAC5B,YAAY,iBAAiB;AAC7B,YAAY,kBAAkB;AAC9B;AACA;AACA,eAAe,YAAY,UAAU,qBAAqB,cAAc;AACxE,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0FAA0F,eAAe;AACzG;AACA;;AAEA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,8CAA8C,iDAAiD;AAC/F;AACA,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gDAAgD,iDAAiD;AACjG;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;;AAEA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA,8EAA8E,iBAAiB;AAC/F;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,uBAAuB;AACtC,gBAAgB,SAAS;AACzB;AACA;AACA,gFAAgF,iBAAiB;AACjG;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;;AAEA,4FAA4F,iBAAiB;AAC7G;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA,4EAA4E,iBAAiB;AAC7F;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,aAAa,uBAAuB;AACpC,cAAc,SAAS;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;AACA;AACA,CAAC;AACD,oC;;;;;;;;;;;AClbA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,aAAa,oBAAoB;AACjC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,oBAAoB;AAC/B,WAAW,SAAS;AACpB,aAAa,oBAAoB;AACjC;AACA;;AAEA;;;;;;;;;;;;ACdA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;;AAEA;;;;;;;;;;;;AChBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9BA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;;AAEA;;;;;;;;;;;;ACdA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACdA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACxCA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,6BAA6B,kBAAkB,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB,EAAE;AAC7C;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvCA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrCA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnBA;;AAEA;AACA;AACA,CAAC;;AAED,sCAAsC,uCAAuC,kBAAkB;;AAE/F;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,wD;;;;;;;;;;;;ACrEA;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,sCAAsC,uCAAuC,kBAAkB;;AAE/F;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,YAAY,SAAS;AACrB;;AAEA;AACA,qEAAqE;;AAErE;AACA;AACA,4BAA4B;AAC5B,mCAAmC;AACnC;;AAEA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB,cAAc,OAAO;AACrB;AACA;AACA,yFAAyF,aAAa;AACtG;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,oC;;;;;;;;;;;ACjGA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;;;;;;;;;;;AC/HA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,MAAM;AACjB,WAAW,OAAO,WAAW;AAC7B,aAAa,OAAO;AACpB;AACA;AACA,wBAAwB;;AAExB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;;AAEA;;;;;;;;;;;;AChBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtCA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,YAAY;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACnBA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC1BA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;;AAEA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AClBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;;AAEA;;;;;;;;;;;;ACdA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACzBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACfA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACdA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACxCA;;AAEA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACbA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA;AACA,MAAM,mBAAmB;AACzB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtDA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,6BAA6B,kBAAkB,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACjCA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB,kBAAkB,EAAE;AAC7C;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACvCA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACrCA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2DAA2D;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACpBA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;;;;;;;;;;;AChCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,EAAE;AACb,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;;;;;;;;;;;;AChCA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,aAAa,EAAE;AACf;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACnBA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;;ACnBA;;AAEA,IAAMA,qBAAqB,mBAAAC,CAAQ,oDAAR,CAA3B;AACA,IAAMC,q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","file":"formation.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/formation.js\");\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","/**\n * Stampit\n **\n * Create objects from reusable, composable behaviors.\n **\n * Copyright (c) 2013 Eric Elliott\n * http://opensource.org/licenses/MIT\n **/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _lodashCollectionForEach = require('lodash/collection/forEach');\n\nvar _lodashCollectionForEach2 = _interopRequireDefault(_lodashCollectionForEach);\n\nvar _lodashLangIsFunction = require('lodash/lang/isFunction');\n\nvar _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);\n\nvar _lodashLangIsObject = require('lodash/lang/isObject');\n\nvar _lodashLangIsObject2 = _interopRequireDefault(_lodashLangIsObject);\n\nvar _supermixer = require('supermixer');\n\nvar create = Object.create;\nfunction isThenable(value) {\n  return value && (0, _lodashLangIsFunction2['default'])(value.then);\n}\n\nfunction extractFunctions() {\n  var result = [];\n\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if ((0, _lodashLangIsFunction2['default'])(args[0])) {\n    (0, _lodashCollectionForEach2['default'])(args, function (fn) {\n      // assuming all the arguments are functions\n      if ((0, _lodashLangIsFunction2['default'])(fn)) {\n        result.push(fn);\n      }\n    });\n  } else if ((0, _lodashLangIsObject2['default'])(args[0])) {\n    (0, _lodashCollectionForEach2['default'])(args, function (obj) {\n      (0, _lodashCollectionForEach2['default'])(obj, function (fn) {\n        if ((0, _lodashLangIsFunction2['default'])(fn)) {\n          result.push(fn);\n        }\n      });\n    });\n  }\n  return result;\n}\n\nfunction addMethods(fixed) {\n  for (var _len2 = arguments.length, methods = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    methods[_key2 - 1] = arguments[_key2];\n  }\n\n  return _supermixer.mixinFunctions.apply(undefined, [fixed.methods].concat(methods));\n}\nfunction addRefs(fixed) {\n  for (var _len3 = arguments.length, refs = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    refs[_key3 - 1] = arguments[_key3];\n  }\n\n  fixed.refs = fixed.state = _supermixer.mixin.apply(undefined, [fixed.refs].concat(refs));\n  return fixed.refs;\n}\nfunction addInit(fixed) {\n  for (var _len4 = arguments.length, inits = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    inits[_key4 - 1] = arguments[_key4];\n  }\n\n  var extractedInits = extractFunctions.apply(undefined, inits);\n  fixed.init = fixed.enclose = fixed.init.concat(extractedInits);\n  return fixed.init;\n}\nfunction addProps(fixed) {\n  for (var _len5 = arguments.length, propses = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    propses[_key5 - 1] = arguments[_key5];\n  }\n\n  return _supermixer.merge.apply(undefined, [fixed.props].concat(propses));\n}\nfunction addStatic(fixed) {\n  for (var _len6 = arguments.length, statics = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    statics[_key6 - 1] = arguments[_key6];\n  }\n\n  return _supermixer.mixin.apply(undefined, [fixed['static']].concat(statics));\n}\n\nfunction cloneAndExtend(fixed, extensionFunction) {\n  var stamp = stampit(fixed);\n\n  for (var _len7 = arguments.length, args = Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n    args[_key7 - 2] = arguments[_key7];\n  }\n\n  extensionFunction.apply(undefined, [stamp.fixed].concat(args));\n  return stamp;\n}\n\nfunction _compose() {\n  var result = stampit();\n\n  for (var _len8 = arguments.length, factories = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    factories[_key8] = arguments[_key8];\n  }\n\n  (0, _lodashCollectionForEach2['default'])(factories, function (source) {\n    if (source && source.fixed) {\n      addMethods(result.fixed, source.fixed.methods);\n      // We might end up having two different stampit modules loaded and used in conjunction.\n      // These || operators ensure that old stamps could be combined with the current version stamps.\n      // 'state' is the old name for 'refs'\n      addRefs(result.fixed, source.fixed.refs || source.fixed.state);\n      // 'enclose' is the old name for 'init'\n      addInit(result.fixed, source.fixed.init || source.fixed.enclose);\n      addProps(result.fixed, source.fixed.props);\n      addStatic(result.fixed, source.fixed['static']);\n    }\n  });\n  return (0, _supermixer.mixin)(result, result.fixed['static']);\n}\n\n/**\n * Return a factory function that will produce new objects using the\n * components that are passed in or composed.\n *\n * @param  {Object} [options] Options to build stamp from: `{ methods, refs, init, props }`\n * @param  {Object} [options.methods] A map of method names and bodies for delegation.\n * @param  {Object} [options.refs] A map of property names and values to be mixed into each new object.\n * @param  {Object} [options.init] A closure (function) used to create private data and privileged methods.\n * @param  {Object} [options.props] An object to be deeply cloned into each newly stamped object.\n * @param  {Object} [options.static] An object to be mixed into each `this` and derived stamps (not objects!).\n * @return {Function(refs)} factory A factory to produce objects.\n * @return {Function(refs)} factory.create Just like calling the factory function.\n * @return {Object} factory.fixed An object map containing the stamp components.\n * @return {Function(methods)} factory.methods Add methods to the stamp. Chainable.\n * @return {Function(refs)} factory.refs Add references to the stamp. Chainable.\n * @return {Function(Function(context))} factory.init Add a closure which called on object instantiation. Chainable.\n * @return {Function(props)} factory.props Add deeply cloned properties to the produced objects. Chainable.\n * @return {Function(stamps)} factory.compose Combine several stamps into single. Chainable.\n * @return {Function(statics)} factory.static Add properties to the stamp (not objects!). Chainable.\n */\nvar stampit = function stampit(options) {\n  var fixed = { methods: {}, refs: {}, init: [], props: {}, 'static': {} };\n  fixed.state = fixed.refs; // Backward compatibility. 'state' is the old name for 'refs'.\n  fixed.enclose = fixed.init; // Backward compatibility. 'enclose' is the old name for 'init'.\n  if (options) {\n    addMethods(fixed, options.methods);\n    addRefs(fixed, options.refs);\n    addInit(fixed, options.init);\n    addProps(fixed, options.props);\n    addStatic(fixed, options['static']);\n  }\n\n  var factory = function Factory(refs) {\n    for (var _len9 = arguments.length, args = Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n      args[_key9 - 1] = arguments[_key9];\n    }\n\n    var instance = (0, _supermixer.mixin)(create(fixed.methods), fixed.refs, refs);\n    (0, _supermixer.mergeUnique)(instance, fixed.props); // props are safely merged into refs\n\n    var nextPromise = null;\n    if (fixed.init.length > 0) {\n      (0, _lodashCollectionForEach2['default'])(fixed.init, function (fn) {\n        if (!(0, _lodashLangIsFunction2['default'])(fn)) {\n          return; // not a function, do nothing.\n        }\n\n        // Check if we are in the async mode.\n        if (!nextPromise) {\n          // Call the init().\n          var callResult = fn.call(instance, { args: args, instance: instance, stamp: factory });\n          if (!callResult) {\n            return; // The init() returned nothing. Proceed to the next init().\n          }\n\n          // Returned value is meaningful.\n          // It will replace the stampit-created object.\n          if (!isThenable(callResult)) {\n            instance = callResult; // stamp is synchronous so far.\n            return;\n          }\n\n          // This is the sync->async conversion point.\n          // Since now our factory will return a promise, not an object.\n          nextPromise = callResult;\n        } else {\n          // As long as one of the init() functions returned a promise,\n          // now our factory will 100% return promise too.\n          // Linking the init() functions into the promise chain.\n          nextPromise = nextPromise.then(function (newInstance) {\n            // The previous promise might want to return a value,\n            // which we should take as a new object instance.\n            instance = newInstance || instance;\n\n            // Calling the following init().\n            // NOTE, than `fn` is wrapped to a closure within the forEach loop.\n            var callResult = fn.call(instance, { args: args, instance: instance, stamp: factory });\n            // Check if call result is truthy.\n            if (!callResult) {\n              // The init() returned nothing. Thus using the previous object instance.\n              return instance;\n            }\n\n            if (!isThenable(callResult)) {\n              // This init() was synchronous and returned a meaningful value.\n              instance = callResult;\n              // Resolve the instance for the next `then()`.\n              return instance;\n            }\n\n            // The init() returned another promise. It is becoming our nextPromise.\n            return callResult;\n          });\n        }\n      });\n    }\n\n    // At the end we should resolve the last promise and\n    // return the resolved value (as a promise too).\n    return nextPromise ? nextPromise.then(function (newInstance) {\n      return newInstance || instance;\n    }) : instance;\n  };\n\n  var refsMethod = cloneAndExtend.bind(null, fixed, addRefs);\n  var initMethod = cloneAndExtend.bind(null, fixed, addInit);\n  return (0, _supermixer.mixin)(factory, {\n    /**\n     * Creates a new object instance from the stamp.\n     */\n    create: factory,\n\n    /**\n     * The stamp components.\n     */\n    fixed: fixed,\n\n    /**\n     * Take n objects and add them to the methods list of a new stamp. Creates new stamp.\n     * @return {Function} A new stamp (factory object).\n     */\n    methods: cloneAndExtend.bind(null, fixed, addMethods),\n\n    /**\n     * Take n objects and add them to the references list of a new stamp. Creates new stamp.\n     * @return {Function} A new stamp (factory object).\n     */\n    refs: refsMethod,\n\n    /**\n     * @deprecated since v2.0. Use refs() instead.\n     * Alias to refs().\n     * @return {Function} A new stamp (factory object).\n     */\n    state: refsMethod,\n\n    /**\n     * Take n functions, an array of functions, or n objects and add\n     * the functions to the initializers list of a new stamp. Creates new stamp.\n     * @return {Function} A new stamp (factory object).\n     */\n    init: initMethod,\n\n    /**\n     * @deprecated since v2.0. User init() instead.\n     * Alias to init().\n     * @return {Function} A new stamp (factory object).\n     */\n    enclose: initMethod,\n\n    /**\n     * Take n objects and deep merge them to the properties. Creates new stamp.\n     * @return {Function} A new stamp (factory object).\n     */\n    props: cloneAndExtend.bind(null, fixed, addProps),\n\n    /**\n     * Take n objects and add all props to the factory object. Creates new stamp.\n     * @return {Function} A new stamp (factory object).\n     */\n    'static': function _static() {\n      for (var _len10 = arguments.length, statics = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        statics[_key10] = arguments[_key10];\n      }\n\n      var newStamp = cloneAndExtend.apply(undefined, [factory.fixed, addStatic].concat(statics));\n      return (0, _supermixer.mixin)(newStamp, newStamp.fixed['static']);\n    },\n\n    /**\n     * Take one or more factories produced from stampit() and\n     * combine them with `this` to produce and return a new factory.\n     * Combining overrides properties with last-in priority.\n     * @param {[Function]|...Function} factories Stampit factories.\n     * @return {Function} A new stampit factory composed from arguments.\n     */\n    compose: function compose() {\n      for (var _len11 = arguments.length, factories = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        factories[_key11] = arguments[_key11];\n      }\n\n      return _compose.apply(undefined, [factory].concat(factories));\n    }\n  }, fixed['static']);\n};\n\n// Static methods\n\nfunction isStamp(obj) {\n  return (0, _lodashLangIsFunction2['default'])(obj) && (0, _lodashLangIsFunction2['default'])(obj.methods) && (\n  // isStamp can be called for old stampit factory object.\n  // We should check old names (state and enclose) too.\n  (0, _lodashLangIsFunction2['default'])(obj.refs) || (0, _lodashLangIsFunction2['default'])(obj.state)) && ((0, _lodashLangIsFunction2['default'])(obj.init) || (0, _lodashLangIsFunction2['default'])(obj.enclose)) && (0, _lodashLangIsFunction2['default'])(obj.props) && (0, _lodashLangIsFunction2['default'])(obj['static']) && (0, _lodashLangIsObject2['default'])(obj.fixed);\n}\n\nfunction convertConstructor(Constructor) {\n  var stamp = stampit();\n  stamp.fixed.refs = stamp.fixed.state = (0, _supermixer.mergeChainNonFunctions)(stamp.fixed.refs, Constructor.prototype);\n  (0, _supermixer.mixin)(stamp, (0, _supermixer.mixin)(stamp.fixed['static'], Constructor));\n\n  (0, _supermixer.mixinChainFunctions)(stamp.fixed.methods, Constructor.prototype);\n  addInit(stamp.fixed, function (_ref) {\n    var instance = _ref.instance;\n    var args = _ref.args;\n    return Constructor.apply(instance, args);\n  });\n\n  return stamp;\n}\n\nfunction shortcutMethod(extensionFunction) {\n  var stamp = stampit();\n\n  for (var _len12 = arguments.length, args = Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n    args[_key12 - 1] = arguments[_key12];\n  }\n\n  extensionFunction.apply(undefined, [stamp.fixed].concat(args));\n\n  return stamp;\n}\n\nfunction mixinWithConsoleWarning() {\n  console.log('stampit.mixin(), .mixIn(), .extend(), and .assign() are deprecated.', 'Use Object.assign or _.assign instead');\n  return _supermixer.mixin.apply(this, arguments);\n}\n\nexports['default'] = (0, _supermixer.mixin)(stampit, {\n\n  /**\n   * Take n objects and add them to the methods list of a new stamp. Creates new stamp.\n   * @return {Function} A new stamp (factory object).\n   */\n  methods: shortcutMethod.bind(null, addMethods),\n\n  /**\n   * Take n objects and add them to the references list of a new stamp. Creates new stamp.\n   * @return {Function} A new stamp (factory object).\n   */\n  refs: shortcutMethod.bind(null, addRefs),\n\n  /**\n   * Take n functions, an array of functions, or n objects and add\n   * the functions to the initializers list of a new stamp. Creates new stamp.\n   * @return {Function} A new stamp (factory object).\n   */\n  init: shortcutMethod.bind(null, addInit),\n\n  /**\n   * Take n objects and deep merge them to the properties. Creates new stamp.\n   * @return {Function} A new stamp (factory object).\n   */\n  props: shortcutMethod.bind(null, addProps),\n\n  /**\n   * Take n objects and add all props to the factory object. Creates new stamp.\n   * @return {Function} A new stamp (factory object).\n   */\n  'static': function _static() {\n    for (var _len13 = arguments.length, statics = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      statics[_key13] = arguments[_key13];\n    }\n\n    var newStamp = shortcutMethod.apply(undefined, [addStatic].concat(statics));\n    return (0, _supermixer.mixin)(newStamp, newStamp.fixed['static']);\n  },\n\n  /**\n   * Take two or more factories produced from stampit() and\n   * combine them to produce a new factory.\n   * Combining overrides properties with last-in priority.\n   * @param {[Function]|...Function} factories Stamps produced by stampit().\n   * @return {Function} A new stampit factory composed from arguments.\n   */\n  compose: _compose,\n\n  /**\n   * @deprecated Since v2.2. Use Object.assign or _.assign instead.\n   * Alias to Object.assign.\n   */\n  mixin: mixinWithConsoleWarning,\n  extend: mixinWithConsoleWarning,\n  mixIn: mixinWithConsoleWarning,\n  assign: mixinWithConsoleWarning,\n\n  /**\n   * Check if an object is a stamp.\n   * @param {Object} obj An object to check.\n   * @returns {Boolean}\n   */\n  isStamp: isStamp,\n\n  /**\n   * Take an old-fashioned JS constructor and return a stampit stamp\n   * that you can freely compose with other stamps.\n   * @param  {Function} Constructor\n   * @return {Function} A composable stampit factory (aka stamp).\n   */\n  convertConstructor: convertConstructor\n});\nmodule.exports = exports['default'];","var arrayEach = require('../internal/arrayEach'),\n    baseEach = require('../internal/baseEach'),\n    createForEach = require('../internal/createForEach');\n\n/**\n * Iterates over elements of `collection` invoking `iteratee` for each element.\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:\n * (value, index|key, collection). Iteratee functions may exit iteration early\n * by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\" property\n * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`\n * may be used for object iteration.\n *\n * @static\n * @memberOf _\n * @alias each\n * @category Collection\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Array|Object|string} Returns `collection`.\n * @example\n *\n * _([1, 2]).forEach(function(n) {\n *   console.log(n);\n * }).value();\n * // => logs each value from left to right and returns the array\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {\n *   console.log(n, key);\n * });\n * // => logs each value-key pair and returns the object (iteration order is not guaranteed)\n */\nvar forEach = createForEach(arrayEach, baseEach);\n\nmodule.exports = forEach;\n","/**\n * A specialized version of `_.forEach` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseForOwn = require('./baseForOwn'),\n    createBaseEach = require('./createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array|Object|string} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object|string} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n","var createBaseFor = require('./createBaseFor');\n\n/**\n * The base implementation of `baseForIn` and `baseForOwn` which iterates\n * over `object` properties returned by `keysFunc` invoking `iteratee` for\n * each property. Iteratee functions may exit iteration early by explicitly\n * returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","var baseFor = require('./baseFor'),\n    keys = require('../object/keys');\n\n/**\n * The base implementation of `_.forOwn` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var identity = require('../utility/identity');\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;\n","var getLength = require('./getLength'),\n    isLength = require('./isLength'),\n    toObject = require('./toObject');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    var length = collection ? getLength(collection) : 0;\n    if (!isLength(length)) {\n      return eachFunc(collection, iteratee);\n    }\n    var index = fromRight ? length : -1,\n        iterable = toObject(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n","var toObject = require('./toObject');\n\n/**\n * Creates a base function for `_.forIn` or `_.forInRight`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var iterable = toObject(object),\n        props = keysFunc(object),\n        length = props.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var key = props[index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var bindCallback = require('./bindCallback'),\n    isArray = require('../lang/isArray');\n\n/**\n * Creates a function for `_.forEach` or `_.forEachRight`.\n *\n * @private\n * @param {Function} arrayFunc The function to iterate over an array.\n * @param {Function} eachFunc The function to iterate over a collection.\n * @returns {Function} Returns the new each function.\n */\nfunction createForEach(arrayFunc, eachFunc) {\n  return function(collection, iteratee, thisArg) {\n    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))\n      ? arrayFunc(collection, iteratee)\n      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));\n  };\n}\n\nmodule.exports = createForEach;\n","var baseProperty = require('./baseProperty');\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\nmodule.exports = getLength;\n","var isNative = require('../lang/isNative');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var getLength = require('./getLength'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\nmodule.exports = isArrayLike;\n","/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;\n","/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isIndex = require('./isIndex'),\n    isLength = require('./isLength'),\n    keysIn = require('../object/keysIn');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A fallback implementation of `Object.keys` which creates an array of the\n * own enumerable property names of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction shimKeys(object) {\n  var props = keysIn(object),\n      propsLength = props.length,\n      length = propsLength && object.length;\n\n  var allowIndexes = !!length && isLength(length) &&\n    (isArray(object) || isArguments(object));\n\n  var index = -1,\n      result = [];\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = shimKeys;\n","var isObject = require('../lang/isObject');\n\n/**\n * Converts `value` to an object if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Object} Returns the object.\n */\nfunction toObject(value) {\n  return isObject(value) ? value : Object(value);\n}\n\nmodule.exports = toObject;\n","var isArrayLike = require('../internal/isArrayLike'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Native method references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is classified as an `arguments` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  return isObjectLike(value) && isArrayLike(value) &&\n    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n}\n\nmodule.exports = isArguments;\n","var getNative = require('../internal/getNative'),\n    isLength = require('../internal/isLength'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar arrayTag = '[object Array]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsArray = getNative(Array, 'isArray');\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(function() { return arguments; }());\n * // => false\n */\nvar isArray = nativeIsArray || function(value) {\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n};\n\nmodule.exports = isArray;\n","var isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 which returns 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\nmodule.exports = isFunction;\n","var isFunction = require('./isFunction'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = isNative;\n","/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var getNative = require('../internal/getNative'),\n    isArrayLike = require('../internal/isArrayLike'),\n    isObject = require('../lang/isObject'),\n    shimKeys = require('../internal/shimKeys');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = getNative(Object, 'keys');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  var Ctor = object == null ? undefined : object.constructor;\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n      (typeof object != 'function' && isArrayLike(object))) {\n    return shimKeys(object);\n  }\n  return isObject(object) ? nativeKeys(object) : [];\n};\n\nmodule.exports = keys;\n","var isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isIndex = require('../internal/isIndex'),\n    isLength = require('../internal/isLength'),\n    isObject = require('../lang/isObject');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  if (!isObject(object)) {\n    object = Object(object);\n  }\n  var length = object.length;\n  length = (length && isLength(length) &&\n    (isArray(object) || isArguments(object)) && length) || 0;\n\n  var Ctor = object.constructor,\n      index = -1,\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n      result = Array(length),\n      skipIndexes = length > 0;\n\n  while (++index < length) {\n    result[index] = (index + '');\n  }\n  for (var key in object) {\n    if (!(skipIndexes && isIndex(key, length)) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = keysIn;\n","/**\n * This method returns the first argument provided to it.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _mixer = require('./mixer');\n\nvar _mixer2 = _interopRequireDefault(_mixer);\n\nvar isFunction = function isFunction(val) {\n  return typeof val === 'function';\n};\nvar isNotFunction = function isNotFunction(val) {\n  return !isFunction(val);\n};\n\n/**\n * Regular mixin function.\n */\nvar mixin = (0, _mixer2['default'])();\n\n/**\n * Mixin functions only.\n */\nvar mixinFunctions = (0, _mixer2['default'])({\n  filter: isFunction\n});\n\n/**\n * Mixin functions including prototype chain.\n */\nvar mixinChainFunctions = (0, _mixer2['default'])({\n  filter: isFunction,\n  chain: true\n});\n\n/**\n * Regular object merge function. Ignores functions.\n */\nvar merge = (0, _mixer2['default'])({\n  deep: true\n});\n\n/**\n * Regular object merge function. Ignores functions.\n */\nvar mergeUnique = (0, _mixer2['default'])({\n  deep: true,\n  noOverwrite: true\n});\n\n/**\n * Merge objects including prototype chain properties.\n */\nvar mergeChainNonFunctions = (0, _mixer2['default'])({\n  filter: isNotFunction,\n  deep: true,\n  chain: true\n});\n\nexports['default'] = _mixer2['default'];\nexports.mixin = mixin;\nexports.mixinFunctions = mixinFunctions;\nexports.mixinChainFunctions = mixinChainFunctions;\nexports.merge = merge;\nexports.mergeUnique = mergeUnique;\nexports.mergeChainNonFunctions = mergeChainNonFunctions;","'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports['default'] = mixer;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar _lodashObjectForOwn = require('lodash/object/forOwn');\n\nvar _lodashObjectForOwn2 = _interopRequireDefault(_lodashObjectForOwn);\n\nvar _lodashObjectForIn = require('lodash/object/forIn');\n\nvar _lodashObjectForIn2 = _interopRequireDefault(_lodashObjectForIn);\n\nvar _lodashLangCloneDeep = require('lodash/lang/cloneDeep');\n\nvar _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);\n\nvar _lodashLangIsObject = require('lodash/lang/isObject');\n\nvar _lodashLangIsObject2 = _interopRequireDefault(_lodashLangIsObject);\n\nvar _lodashLangIsUndefined = require('lodash/lang/isUndefined');\n\nvar _lodashLangIsUndefined2 = _interopRequireDefault(_lodashLangIsUndefined);\n\n/**\n * Factory for creating mixin functions of all kinds.\n *\n * @param {Object} opts\n * @param {Function} opts.filter Function which filters value and key.\n * @param {Function} opts.transform Function which transforms each value.\n * @param {Boolean} opts.chain Loop through prototype properties too.\n * @param {Boolean} opts.deep Deep looping through the nested properties.\n * @param {Boolean} opts.noOverwrite Do not overwrite any existing data (aka first one wins).\n * @return {Function} A new mix function.\n */\n\nfunction mixer() {\n  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n  // We will be recursively calling the exact same function when walking deeper.\n  if (opts.deep && !opts._innerMixer) {\n    opts._innerMixer = true; // avoiding infinite recursion.\n    opts._innerMixer = mixer(opts); // create same mixer for recursion purpose.\n  }\n\n  /**\n   * Combine properties from the passed objects into target. This method mutates target,\n   * if you want to create a new Object pass an empty object as first param.\n   *\n   * @param {Object} target Target Object\n   * @param {...Object} objects Objects to be combined (0...n objects).\n   * @return {Object} The mixed object.\n   */\n  return function mix(target) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n\n    // Check if it's us who called the function. See recursion calls are below.\n    if ((0, _lodashLangIsUndefined2['default'])(target) || !opts.noOverwrite && !(0, _lodashLangIsObject2['default'])(target)) {\n      if (sources.length > 1) {\n        // Weird, but someone (not us!) called this mixer with an incorrect first argument.\n        return opts._innerMixer.apply(opts, [{}].concat(sources));\n      }\n      return (0, _lodashLangCloneDeep2['default'])(sources[0]);\n    }\n\n    if (opts.noOverwrite) {\n      if (!(0, _lodashLangIsObject2['default'])(target) || !(0, _lodashLangIsObject2['default'])(sources[0])) {\n        return target;\n      }\n    }\n\n    function iteratee(sourceValue, key) {\n      var targetValue = target[key];\n      if (opts.filter && !opts.filter(sourceValue, targetValue, key)) {\n        return;\n      }\n\n      var result = opts.deep ? opts._innerMixer(targetValue, sourceValue) : sourceValue;\n      target[key] = opts.transform ? opts.transform(result, targetValue, key) : result;\n    }\n\n    var loop = opts.chain ? _lodashObjectForIn2['default'] : _lodashObjectForOwn2['default'];\n    sources.forEach(function (obj) {\n      loop(obj, iteratee);\n    });\n\n    return target;\n  };\n}\n\nmodule.exports = exports['default'];","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction arrayCopy(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayCopy;\n","/**\n * A specialized version of `_.forEach` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n","var baseCopy = require('./baseCopy'),\n    keys = require('../object/keys');\n\n/**\n * The base implementation of `_.assign` without support for argument juggling,\n * multiple sources, and `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return source == null\n    ? object\n    : baseCopy(source, keys(source), object);\n}\n\nmodule.exports = baseAssign;\n","var arrayCopy = require('./arrayCopy'),\n    arrayEach = require('./arrayEach'),\n    baseAssign = require('./baseAssign'),\n    baseForOwn = require('./baseForOwn'),\n    initCloneArray = require('./initCloneArray'),\n    initCloneByTag = require('./initCloneByTag'),\n    initCloneObject = require('./initCloneObject'),\n    isArray = require('../lang/isArray'),\n    isObject = require('../lang/isObject');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[boolTag] =\ncloneableTags[dateTag] = cloneableTags[float32Tag] =\ncloneableTags[float64Tag] = cloneableTags[int8Tag] =\ncloneableTags[int16Tag] = cloneableTags[int32Tag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[stringTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[mapTag] = cloneableTags[setTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * The base implementation of `_.clone` without support for argument juggling\n * and `this` binding `customizer` functions.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {Function} [customizer] The function to customize cloning values.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The object `value` belongs to.\n * @param {Array} [stackA=[]] Tracks traversed source objects.\n * @param {Array} [stackB=[]] Associates clones with source counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, customizer, key, object, stackA, stackB) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return arrayCopy(value, result);\n    }\n  } else {\n    var tag = objToString.call(value),\n        isFunc = tag == funcTag;\n\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return baseAssign(result, value);\n      }\n    } else {\n      return cloneableTags[tag]\n        ? initCloneByTag(value, tag, isDeep)\n        : (object ? value : {});\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stackA || (stackA = []);\n  stackB || (stackB = []);\n\n  var length = stackA.length;\n  while (length--) {\n    if (stackA[length] == value) {\n      return stackB[length];\n    }\n  }\n  // Add the source value to the stack of traversed objects and associate it with its clone.\n  stackA.push(value);\n  stackB.push(result);\n\n  // Recursively populate clone (susceptible to call stack limits).\n  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {\n    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property names to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @returns {Object} Returns `object`.\n */\nfunction baseCopy(source, props, object) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n    object[key] = source[key];\n  }\n  return object;\n}\n\nmodule.exports = baseCopy;\n","var createBaseFor = require('./createBaseFor');\n\n/**\n * The base implementation of `baseForIn` and `baseForOwn` which iterates\n * over `object` properties returned by `keysFunc` invoking `iteratee` for\n * each property. Iteratee functions may exit iteration early by explicitly\n * returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n","var baseFor = require('./baseFor'),\n    keys = require('../object/keys');\n\n/**\n * The base implementation of `_.forOwn` without support for callback\n * shorthands and `this` binding.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var identity = require('../utility/identity');\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;\n","/** Native method references. */\nvar ArrayBuffer = global.ArrayBuffer,\n    Uint8Array = global.Uint8Array;\n\n/**\n * Creates a clone of the given array buffer.\n *\n * @private\n * @param {ArrayBuffer} buffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction bufferClone(buffer) {\n  var result = new ArrayBuffer(buffer.byteLength),\n      view = new Uint8Array(result);\n\n  view.set(new Uint8Array(buffer));\n  return result;\n}\n\nmodule.exports = bufferClone;\n","var toObject = require('./toObject');\n\n/**\n * Creates a base function for `_.forIn` or `_.forInRight`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var iterable = toObject(object),\n        props = keysFunc(object),\n        length = props.length,\n        index = fromRight ? length : -1;\n\n    while ((fromRight ? index-- : ++index < length)) {\n      var key = props[index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","var bindCallback = require('./bindCallback'),\n    keysIn = require('../object/keysIn');\n\n/**\n * Creates a function for `_.forIn` or `_.forInRight`.\n *\n * @private\n * @param {Function} objectFunc The function to iterate over an object.\n * @returns {Function} Returns the new each function.\n */\nfunction createForIn(objectFunc) {\n  return function(object, iteratee, thisArg) {\n    if (typeof iteratee != 'function' || thisArg !== undefined) {\n      iteratee = bindCallback(iteratee, thisArg, 3);\n    }\n    return objectFunc(object, iteratee, keysIn);\n  };\n}\n\nmodule.exports = createForIn;\n","var bindCallback = require('./bindCallback');\n\n/**\n * Creates a function for `_.forOwn` or `_.forOwnRight`.\n *\n * @private\n * @param {Function} objectFunc The function to iterate over an object.\n * @returns {Function} Returns the new each function.\n */\nfunction createForOwn(objectFunc) {\n  return function(object, iteratee, thisArg) {\n    if (typeof iteratee != 'function' || thisArg !== undefined) {\n      iteratee = bindCallback(iteratee, thisArg, 3);\n    }\n    return objectFunc(object, iteratee);\n  };\n}\n\nmodule.exports = createForOwn;\n","var baseProperty = require('./baseProperty');\n\n/**\n * Gets the \"length\" property value of `object`.\n *\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)\n * that affects Safari on at least iOS 8.1-8.3 ARM64.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {*} Returns the \"length\" value.\n */\nvar getLength = baseProperty('length');\n\nmodule.exports = getLength;\n","var isNative = require('../lang/isNative');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = object == null ? undefined : object[key];\n  return isNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add array properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nmodule.exports = initCloneArray;\n","var bufferClone = require('./bufferClone');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    stringTag = '[object String]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return bufferClone(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      var buffer = object.buffer;\n      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      var result = new Ctor(object.source, reFlags.exec(object));\n      result.lastIndex = object.lastIndex;\n  }\n  return result;\n}\n\nmodule.exports = initCloneByTag;\n","/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  var Ctor = object.constructor;\n  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {\n    Ctor = Object;\n  }\n  return new Ctor;\n}\n\nmodule.exports = initCloneObject;\n","var getLength = require('./getLength'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(getLength(value));\n}\n\nmodule.exports = isArrayLike;\n","/** Used to detect unsigned integer values. */\nvar reIsUint = /^\\d+$/;\n\n/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return value > -1 && value % 1 == 0 && value < length;\n}\n\nmodule.exports = isIndex;\n","/**\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)\n * of an array-like value.\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n */\nfunction isLength(value) {\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n","/**\n * Checks if `value` is object-like.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isIndex = require('./isIndex'),\n    isLength = require('./isLength'),\n    keysIn = require('../object/keysIn');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A fallback implementation of `Object.keys` which creates an array of the\n * own enumerable property names of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction shimKeys(object) {\n  var props = keysIn(object),\n      propsLength = props.length,\n      length = propsLength && object.length;\n\n  var allowIndexes = !!length && isLength(length) &&\n    (isArray(object) || isArguments(object));\n\n  var index = -1,\n      result = [];\n\n  while (++index < propsLength) {\n    var key = props[index];\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = shimKeys;\n","var isObject = require('../lang/isObject');\n\n/**\n * Converts `value` to an object if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Object} Returns the object.\n */\nfunction toObject(value) {\n  return isObject(value) ? value : Object(value);\n}\n\nmodule.exports = toObject;\n","var baseClone = require('../internal/baseClone'),\n    bindCallback = require('../internal/bindCallback');\n\n/**\n * Creates a deep clone of `value`. If `customizer` is provided it's invoked\n * to produce the cloned values. If `customizer` returns `undefined` cloning\n * is handled by the method instead. The `customizer` is bound to `thisArg`\n * and invoked with up to three argument; (value [, index|key, object]).\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n * The enumerable properties of `arguments` objects and objects created by\n * constructors other than `Object` are cloned to plain `Object` objects. An\n * empty object is returned for uncloneable values such as functions, DOM nodes,\n * Maps, Sets, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to deep clone.\n * @param {Function} [customizer] The function to customize cloning values.\n * @param {*} [thisArg] The `this` binding of `customizer`.\n * @returns {*} Returns the deep cloned value.\n * @example\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * var deep = _.cloneDeep(users);\n * deep[0] === users[0];\n * // => false\n *\n * // using a customizer callback\n * var el = _.cloneDeep(document.body, function(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * });\n *\n * el === document.body\n * // => false\n * el.nodeName\n * // => BODY\n * el.childNodes.length;\n * // => 20\n */\nfunction cloneDeep(value, customizer, thisArg) {\n  return typeof customizer == 'function'\n    ? baseClone(value, true, bindCallback(customizer, thisArg, 3))\n    : baseClone(value, true);\n}\n\nmodule.exports = cloneDeep;\n","var isArrayLike = require('../internal/isArrayLike'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Native method references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is classified as an `arguments` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  return isObjectLike(value) && isArrayLike(value) &&\n    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');\n}\n\nmodule.exports = isArguments;\n","var getNative = require('../internal/getNative'),\n    isLength = require('../internal/isLength'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar arrayTag = '[object Array]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeIsArray = getNative(Array, 'isArray');\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(function() { return arguments; }());\n * // => false\n */\nvar isArray = nativeIsArray || function(value) {\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;\n};\n\nmodule.exports = isArray;\n","var isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in older versions of Chrome and Safari which return 'function' for regexes\n  // and Safari 8 which returns 'object' for typed array constructors.\n  return isObject(value) && objToString.call(value) == funcTag;\n}\n\nmodule.exports = isFunction;\n","var isFunction = require('./isFunction'),\n    isObjectLike = require('../internal/isObjectLike');\n\n/** Used to detect host constructors (Safari > 5). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar fnToString = Function.prototype.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * Checks if `value` is a native function.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.\n * @example\n *\n * _.isNative(Array.prototype.push);\n * // => true\n *\n * _.isNative(_);\n * // => false\n */\nfunction isNative(value) {\n  if (value == null) {\n    return false;\n  }\n  if (isFunction(value)) {\n    return reIsNative.test(fnToString.call(value));\n  }\n  return isObjectLike(value) && reIsHostCtor.test(value);\n}\n\nmodule.exports = isNative;\n","/**\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(1);\n * // => false\n */\nfunction isObject(value) {\n  // Avoid a V8 JIT bug in Chrome 19-20.\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is `undefined`.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * _.isUndefined(void 0);\n * // => true\n *\n * _.isUndefined(null);\n * // => false\n */\nfunction isUndefined(value) {\n  return value === undefined;\n}\n\nmodule.exports = isUndefined;\n","var baseFor = require('../internal/baseFor'),\n    createForIn = require('../internal/createForIn');\n\n/**\n * Iterates over own and inherited enumerable properties of an object invoking\n * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked\n * with three arguments: (value, key, object). Iteratee functions may exit\n * iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forIn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)\n */\nvar forIn = createForIn(baseFor);\n\nmodule.exports = forIn;\n","var baseForOwn = require('../internal/baseForOwn'),\n    createForOwn = require('../internal/createForOwn');\n\n/**\n * Iterates over own enumerable properties of an object invoking `iteratee`\n * for each property. The `iteratee` is bound to `thisArg` and invoked with\n * three arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [thisArg] The `this` binding of `iteratee`.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.forOwn(new Foo, function(value, key) {\n *   console.log(key);\n * });\n * // => logs 'a' and 'b' (iteration order is not guaranteed)\n */\nvar forOwn = createForOwn(baseForOwn);\n\nmodule.exports = forOwn;\n","var getNative = require('../internal/getNative'),\n    isArrayLike = require('../internal/isArrayLike'),\n    isObject = require('../lang/isObject'),\n    shimKeys = require('../internal/shimKeys');\n\n/* Native method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = getNative(Object, 'keys');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nvar keys = !nativeKeys ? shimKeys : function(object) {\n  var Ctor = object == null ? undefined : object.constructor;\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||\n      (typeof object != 'function' && isArrayLike(object))) {\n    return shimKeys(object);\n  }\n  return isObject(object) ? nativeKeys(object) : [];\n};\n\nmodule.exports = keys;\n","var isArguments = require('../lang/isArguments'),\n    isArray = require('../lang/isArray'),\n    isIndex = require('../internal/isIndex'),\n    isLength = require('../internal/isLength'),\n    isObject = require('../lang/isObject');\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  if (object == null) {\n    return [];\n  }\n  if (!isObject(object)) {\n    object = Object(object);\n  }\n  var length = object.length;\n  length = (length && isLength(length) &&\n    (isArray(object) || isArguments(object)) && length) || 0;\n\n  var Ctor = object.constructor,\n      index = -1,\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,\n      result = Array(length),\n      skipIndexes = length > 0;\n\n  while (++index < length) {\n    result[index] = (index + '');\n  }\n  for (var key in object) {\n    if (!(skipIndexes && isIndex(key, length)) &&\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = keysIn;\n","/**\n * This method returns the first argument provided to it.\n *\n * @static\n * @memberOf _\n * @category Utility\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'user': 'fred' };\n *\n * _.identity(object) === object;\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict';\n\nconst consoleLoggerStamp = require('../logging/console');\nconst domNavigationStamp = require('../utilities/dom-navigation');\nconst eventDefinitionsStamp = require('../event-handlers/event-definitions-stamp');\n\nconst stampit = require('stampit');\n\n/**\n * Provides an interface for form button elements (`button`, `input:submit`, etc).\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.buttonComponent\n * @mixin         Formation.buttonComponent\n *\n * @mixes         Formation.toggleableConsole\n * @mixes         Formation.domNavigation\n * @mixes         Formation.eventDefinitions\n */\nconst buttonComponentStamp = stampit()\n  .refs({\n\n    /**\n     * The `button` (or `input` equivalent) this component will manage.\n     *\n     * @access      public\n     * @type        {Element}\n     * @memberOf    {Formation.buttonComponent}\n     * @default     null\n     */\n    button : null,\n\n    /**\n     * A singleton passed along so we have some semblance of\n     * a global Formation event emitter.\n     *\n     * @access      public\n     * @type        {Formation.eventEmitter}\n     * @memberOf    {Formation.buttonComponent}\n     * @default     null\n     */\n    nodeEvents : null,\n\n    /**\n     * The message that will be shown when this is in a `loading` state.\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.buttonComponent}\n     * @default     loading\n     */\n    loadingText : 'loading',\n\n    /**\n     * The element attribute in which we store the final `loading` state HTML.\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.buttonComponent}\n     * @default     data-loading-text\n     */\n    loadingTextDataKey : 'data-loading-text'\n  })\n  .methods({\n\n    /**\n     * Check whether the `button` represents a non-null Element object.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     * @mixes       {Formation.buttonComponent}\n     *\n     * @returns     {Boolean}\n     */\n    exists() {\n      return (this.button !== null);\n    },\n\n    /**\n     * Check whether the `button` is currently in a 'submitting' state.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     * @mixes       {Formation.buttonComponent}\n     *\n     * @returns     {Boolean}       isSubmitting\n     */\n    isSubmitting() {\n      const isSubmitting = (\n        this.exists() &&\n        this.button.hasAttribute(this.submittingStateDataKey) &&\n        parseInt(this.button.getAttribute(this.submittingStateDataKey)) === 1\n      );\n\n      return isSubmitting;\n    },\n\n    /**\n     * Will enable or disable the `button` based on the `enable` param.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     * @mixes       {Formation.buttonComponent}\n     *\n     * @param       {Boolean}       enable          Whether to enable (true) or disable (false) the `button`. Required.\n     *\n     * @returns     {Formation.buttonComponent}\n     */\n    setEnabled(enable) {\n      this.enableOrDisableElement(this.button, enable);\n\n      return this;\n    },\n\n    /**\n     * Will set the `button` to a `submitting` state or undo it depending on\n     * the `submitting` param.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     * @mixes       {Formation.buttonComponent}\n     *\n     * @param       {Boolean}       submitting      Whether to set the `button` to a submitting state (true) or not (false). Required.\n     *\n     * @returns     {Formation.buttonComponent}\n     */\n    setSubmitting(submitting) {\n      if (submitting) {\n        this.button.setAttribute(this.submittingStateDataKey, 1);\n      }\n      else {\n        this.button.removeAttribute(this.submittingStateDataKey);\n      }\n\n      return this;\n    },\n\n    /**\n     * Add a node event that will listen for a form submit event and handle it.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     * @mixes       {Formation.buttonComponent}\n     *\n     * @returns     {Formation.buttonComponent}\n     */\n    addHandleFormSubmitListener() {\n      this.nodeEvents.on(this.nodeEvents.getNodeFormSubmitEvent(), event => this.handleFormSubmitEvent(event));\n\n      return this;\n    },\n\n    /**\n     * Disable the `button` element, indicate that it is submitting, and trigger\n     * its `blur` event so the user can't accidentally trigger form submission\n     * again with an enter or spacebar keypress.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     * @mixes       {Formation.buttonComponent}\n     *\n     * @param       {Event}         event       The `submit` event object. Required.\n     */\n    handleFormSubmitEvent(event) {\n      this.log(`handleFormSubmitEvent() called for ${this.exists() ? this.button.toString() : 'undefined'}`);\n      if (this.exists()) {\n        this.setEnabled(false).setSubmitting(true);\n\n        const blurEvent = new CustomEvent(this.getBlurEventName(), { bubbles: true, cancelable: true });\n        this.button.dispatchEvent(blurEvent);\n      }\n    }\n  })\n  .init(function() {\n\n    /**\n     * HTML that will be dynamically added to the element as part of\n     * what we show the user in the the button when it is submitting.\n     *\n     * @private\n     * @access      private\n     * @type        {String}\n     * @memberOf    {Formation.buttonComponent}\n     * @default     null\n     */\n    let __continueButtonSpinnerHTML = '<span class=\"glyphicon glyphicon-repeat spinning\"></span>';\n\n    /**\n     * Generates loading text with spinner HTML and returns it.\n     *\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.buttonComponent}\n     */\n    let getButtonLoadingTextWithSpinnerHTML = () => {\n      return `${__continueButtonSpinnerHTML} ${this.loadingText}`;\n    };\n\n    /**\n     * Set the value of the loading text attribute to the constructed value.\n     *\n     * @access      public\n     * @memberOf    {Formation.buttonComponent}\n     *\n     * @returns     {Formation.buttonComponent}\n     */\n    this.setLoadingHTML = () => {\n      this.button.setAttribute(this.loadingTextDataKey, getButtonLoadingTextWithSpinnerHTML());\n\n      return this;\n    };\n  });\n\nmodule.exports = buttonComponentStamp.compose(\n  consoleLoggerStamp,\n  domNavigationStamp,\n  eventDefinitionsStamp\n);\n","'use strict';\n\nconst buttonComponentStamp = require('./button');\nconst checkboxDefaultRulesStamp = require('../rules/checkbox-default-rules');\nconst consoleLoggerStamp = require('../logging/console');\nconst domNavigationStamp = require('../utilities/dom-navigation');\nconst radioDefaultRulesStamp = require('../rules/radio-default-rules');\nconst selectDefaultRulesStamp = require('../rules/select-default-rules');\nconst textDefaultRulesStamp = require('../rules/text-default-rules');\n\nconst stampit = require('stampit');\n\n/**\n * Provides an interface for form button elements (`button`, `input:submit`, etc).\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.formComponent\n * @mixin         Formation.formComponent\n *\n * @mixes         Formation.toggleableConsole\n * @mixes         Formation.domNavigation\n */\nconst formComponentStamp = stampit()\n  .refs({\n\n    /**\n     * A singleton passed along so we have some semblance of\n     * a global Formation event emitter.\n     *\n     * @access      public\n     * @type        {Formation.eventEmitter}\n     * @memberOf    {Formation.formComponent}\n     * @default     null\n     */\n    nodeEvents : null,\n  })\n  .methods({\n\n    /**\n     * A method for retrieving the formComponent of an element.\n     *\n     * @access      public\n     * @type        {function}\n     * @memberOf    {Formation.formComponent}\n     * @mixes       {Formation.formComponent}\n     *\n     * @returns     {Formation.formComponent}\n     */\n    getFormComponentOfCurrentElement() {\n      return this;\n    },\n\n    /**\n     * Register a Formation validation rule for the element type specified.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     * @mixes       {Formation.formComponent}\n     *\n     * @param       {String}                  elementType         The element type to which the rule applies. Required.\n     * @param       {Formation.rule}          rule                An instance of the ruleStamp. Required.\n     */\n    registerRule(elementType, rule) {\n      if (typeof rule.isFormationRule !== 'function' || ! rule.isFormationRule()) {\n        throw new TypeError('The supplied `rule` object is not built from a `ruleStamp` stamp.');\n      }\n\n      this.getRuleSetBySupportedElementType(elementType).add(rule);\n    }\n  })\n  .init(function() {\n\n    /**\n     * Helper function that users of this Stamp can use to determine if an object is composed\n     * of this Stamp.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {Boolean}       true\n     */\n    this.isFormComponent = () => true;\n\n    /**\n     * The initialized form node.\n     *\n     * @private\n     * @access      private\n     * @type        {Element}\n     * @memberOf    {Formation.formComponent}\n     * @default     null\n     */\n    let __form = null;\n\n    /**\n     * Returns the initialized form node.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {Element}     __form\n     */\n    this.getForm = () => __form;\n\n    /**\n     * Returns whether the current form is in a valid state.\n     *\n     * @returns {boolean}\n     */\n    this.isFormValid = () => (this.getForm() && parseInt(this.getForm().getAttribute(this.validAttrKey)) === 1);\n\n    /**\n     * The initialization status.\n     *\n     * @private\n     * @access      private\n     * @type        {Boolean}\n     * @memberOf    {Formation.formComponent}\n     * @default     false\n     */\n    let __initialized = false;\n\n    /**\n     * Returns the initialization status of this instance.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {boolean}       __initialized\n     */\n    this.initialized = () => __initialized;\n\n    /**\n     * Checks whether this instance has been initialized, or if there is a `formComponent` attached to\n     * the `form` element already which has been initialized.\n     *\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {Boolean}                     False iff neither this instance, nor the `formComponent` attached to the `form`, have been initialized.\n     */\n    const __formAlreadyInitialized = () => {\n      let alreadyInit = this.initialized();\n      try {\n        let formComponent;\n        const form = this.getForm();\n        alreadyInit = (\n          alreadyInit || (\n            form !== null &&\n            (formComponent = this.getFormComponentOfCurrentElement(form)) !== null &&\n            formComponent.initialized()\n          )\n        );\n      }\n      catch (e) {\n        this.info(e);\n      }\n      return alreadyInit;\n    };\n\n    /**\n     * The meat of this Stamp. Will initialize a `form` and assign it internally,\n     * setting all the required and optional fields, the form submit button,\n     * and initializing the fields' current validation status. If everything went without error,\n     * sets the `__initialized` flag to `true` so that we can't re-initialize the `form`.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @param       {Element}         form               The `form` element to be managed by this instance. Required.\n     *\n     * @returns     {Formation.formComponent}\n     */\n    this.initForm = form => {\n      // Set the form so we can use it internally elsewhere.\n      __form = form;\n\n      if (__formAlreadyInitialized()) {\n        this.warn('This `formComponent` is already initialized, skipping.');\n        return this;\n      }\n\n      // Get the required and optional fields, and the submit button present in the form.\n      __setRequiredFields();\n      __setOptionalFields();\n      __initFields();\n      __initFormButtons();\n\n      // There were no problems initializing the form, set the private vars.\n      __initialized = true;\n\n      return this;\n    };\n\n    /**\n     * The NodeList containing the elements in this form that are required to be validated.\n     *\n     * @private\n     * @access      private\n     * @type        {NodeList}\n     * @memberOf    {Formation.formComponent}\n     * @default     null\n     */\n    let __requiredFields = null;\n\n    /**\n     * Returns the NodeList containing the elements in this form that are required to be validated.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {NodeList}       __requiredFields\n     */\n    this.getRequiredFields = () => __requiredFields;\n\n    /**\n     * Find the required fields and set them to the private `__requiredFields` var.\n     *\n     * @throws      Error       iff the set of required fields is empty.\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.formComponent}\n     */\n    const __setRequiredFields = () => {\n      __requiredFields = this.findRequiredFields(__form);\n      if (! __requiredFields.length) {\n        // TODO - use a custom error type here\n        throw new Error('No required fields found, cannot proceed.');\n      }\n    };\n\n    /**\n     * The NodeList containing the elements in this form that are optional to be validated.\n     *\n     * @private\n     * @access      private\n     * @type        {NodeList}\n     * @memberOf    {Formation.formComponent}\n     * @default     null\n     */\n    let __optionalFields = null;\n\n    /**\n     * Returns the NodeList containing the elements in this form that are optional to be validated.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {NodeList}       __optionalFields\n     */\n    this.getOptionalFields = () => __optionalFields;\n\n    /**\n     * Find the optional fields and set them to the private `__optionalFields` var.\n     *\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.formComponent}\n     */\n    const __setOptionalFields = () => {\n      __optionalFields = this.findOptionalFields(__form);\n    };\n\n    /**\n     * Initialize (or reset) the validity of the `form`, and the\n     * required and optional fields to `false` (0).\n     *\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.formComponent}\n     */\n    const __initFields = () => {\n      this.getForm().setAttribute(this.validAttrKey, 0);\n      __requiredFields.forEach(required => { required.setAttribute(this.validAttrKey, 0); });\n      __optionalFields.forEach(optional => { optional.setAttribute(this.validAttrKey, 0); });\n    };\n\n    /**\n     * The `Formation.buttonComponent` object containing the form's submit button.\n     *\n     * @private\n     * @access      private\n     * @type        {Formation.buttonComponent}\n     * @memberOf    {Formation.formComponent}\n     * @default     null\n     */\n    let __submitButton = null;\n\n    /**\n     * Returns the `__submitButton`.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {Formation.buttonComponent}       __submitButton\n     */\n    this.getSubmitButton = () => __submitButton;\n\n    /**\n     * Create new `buttonComponents` to manage the Submit button\n     * for this form, and set them to the private `__submitButton` var.\n     *\n     * TODO - make `setLoadingHTML()` optional with a new `data-fv` attribute on the button\n     *\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.formComponent}\n     */\n    const __initFormButtons = () => {\n      const button = this.findSubmitButton(__form);\n      if (button.length) {\n        __submitButton = buttonComponentStamp({\n          button : button[0],\n          loadingText : 'Submitting, please wait...',\n          nodeEvents : this.nodeEvents\n        }).initLogging(this.getLogConsole())\n          .addHandleFormSubmitListener()\n          .setLoadingHTML();\n      }\n    };\n\n    /**\n     * The types of elements that are supported by Formation mapped to `querySelectorAll()`\n     * compatible selectors.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {Object}\n     * @memberOf    {Formation.formComponent}\n     */\n    const __supportedElementTypesMap = {\n      'text' : 'input:text,input:password,input:email,input:tel,textarea',\n      'checkbox' : 'input:checkbox',\n      'radio' : 'input:radio',\n      'select': 'select'\n    };\n\n    /**\n     * Return the value of the private `__supportedElementTypesMap` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {Object}      __supportedElementTypesMap         Types of elements supported by Formation.\n     */\n    this.getSupportedElementTypesMap = () => __supportedElementTypesMap;\n\n    /**\n     * Rule sets keyed by the supported element types.\n     *\n     * @private\n     * @access      private\n     * @type        {Object}\n     * @memberOf    {Formation.formComponent}\n     */\n    const __supportedElementTypesRuleSets = {\n      'text' : textDefaultRulesStamp(),\n      'checkbox' : checkboxDefaultRulesStamp(),\n      'radio' : radioDefaultRulesStamp(),\n      'select': selectDefaultRulesStamp()\n    };\n\n    /**\n     * Get all the supported rule sets.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @returns     {Object}\n     */\n    this.getSupportedElementTypeRuleSets = () => __supportedElementTypesRuleSets;\n\n    /**\n     * Get the rule set to be applied to the specified supported element type.\n     *\n     * @access      public\n     * @memberOf    {formComponent}\n     *\n     * @param       {String}          type          The supported element type whose rules we want. Required.\n     *\n     * @returns     {Formation.ruleSet}\n     */\n    this.getRuleSetBySupportedElementType = type => __supportedElementTypesRuleSets[type];\n\n    /**\n     * Set the rule set to be applied to the specified supported element type.\n     *\n     * @access      public\n     * @memberOf    {Formation.formComponent}\n     *\n     * @param       {String}                    type          The supported element type. Required.\n     * @param       {Formation.ruleSet}         rules         The rule set to be applied. Required.\n     */\n    this.setSupportedElementTypeRuleSet = (type, rules) => {\n      __supportedElementTypesRuleSets[type] = rules;\n    };\n  });\n\nmodule.exports = formComponentStamp.compose(\n  domNavigationStamp,\n  consoleLoggerStamp\n);\n","'use strict';\n\nconst consoleLoggerStamp = require('../logging/console');\nconst domNavigationStamp = require('../utilities/dom-navigation');\nconst eventDefinitionsStamp = require('./event-definitions-stamp');\nconst stampit = require('stampit');\n\n/**\n * Provide an interface for managing body events.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.bodyEventsHandler\n * @mixin         Formation.bodyEventsHandler\n *\n * @mixes         Formation.toggleableConsole\n * @mixes         Formation.domNavigation\n * @mixes         Formation.eventDefinitions\n */\nconst bodyEventsHandlerStamp = stampit()\n  .refs({\n\n    /**\n     * The `body` element.\n     *\n     * @access      public\n     * @type        {Element}\n     * @memberOf    {Formation.bodyEventsHandler}\n     * @default     null\n     */\n    body : null,\n\n    /**\n     * A singleton passed along so we have some semblance of\n     * a global Formation event emitter.\n     *\n     * @access      public\n     * @type        {Formation.eventEmitterStamp}\n     * @memberOf    {Formation.bodyEventsHandler}\n     * @default     null\n     */\n    nodeEvents : null,\n  })\n  .methods({\n\n    /**\n     * Adds a default event handler the `keyup` events and sets the initialized flag to be `true`.\n     *\n     * @access      public\n     * @memberOf    {Formation.bodyEventsHandler}\n     * @mixes       {Formation.bodyEventsHandler}\n     *\n     * @returns     {Formation.bodyEventsHandler}\n     */\n    addDefaultEventHandlers() {\n      this.body.addEventListener(this.getKeyUpEventName(), event => this.bodyKeyUpHandler(event));\n\n      this.setEventsInitialized(true);\n\n      return this;\n    },\n\n    /**\n     * If the user presses the ENTER or SPACEBAR keys while a checkbox or radio\n     * Bootstrap form label is in focus, this will trigger the `click` event in\n     * order to select/deselect the focused form element. This is primarily for\n     * labels which visually encompass a hidden checkbox or radio field.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.bodyEventsHandler}\n     * @mixes       {Formation.bodyEventsHandler}\n     *\n     * @param       {KeyboardEvent}       event       The `keyup` event object. Required.\n     */\n    bodyKeyUpHandler(event) {\n      if (['enter', 'space'].indexOf(event.key) !== -1 &&\n          this.elementIsCustomRadioOrCheckboxWidget(event.target)) {\n        event.target.click();\n      }\n    }\n  });\n\nmodule.exports = bodyEventsHandlerStamp.compose(eventDefinitionsStamp, domNavigationStamp, consoleLoggerStamp);\n","'use strict';\n\nconst stampit = require('stampit');\n\n/**\n * Provides an interface for defining Formation DOM events. \n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.eventDefinitions\n * @mixin         Formation.eventDefinitions\n */\nconst eventDefinitionsStamp = stampit()\n  .init(function() {\n\n    /**\n     * Flag indicating whether the object's event handlers have been added.\n     *\n     * @access      private\n     * @type        Boolean\n     * @memberOf    {Formation.eventDefinitions}\n     * @default     false\n     */\n    let __eventsInitialized = false;\n\n    /**\n     * Return the value of the private `__eventsInitialized` flag.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {Boolean}                         __eventsInitialized        Flag indicating whether the event handlers have been added.\n     */\n    this.getEventsInitialized = () => __eventsInitialized;\n\n    /**\n     * Set the private `__eventsInitialized` flag on the object.\n     *\n     * @throws      TypeError                                     if the `newVal` param is not a boolean.\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @param       {Boolean}                         newVal      Flag indicating whether the form's event handlers have been added. Required.\n     *\n     * @returns     {Formation.eventDefinitions}      this        Return the instance of the generated object so we can chain methods.\n     */\n    this.setEventsInitialized = newVal => {\n      const callStackCurrent = 'eventDefinitionsStamp.setEventsInitialized';\n      if (typeof newVal !== 'boolean') {\n        throw new TypeError(callStackCurrent + '() - Expected `newVal` param to be a Boolean, but is `' + typeof(newVal) + '`.');\n      }\n\n      __eventsInitialized = newVal;\n\n      // So we can chain methods.\n      return this;\n    };\n\n    /**\n     * The event name for checking validation of the entire `form`.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __checkFormValidityEventName = 'check-form-validity';\n\n    /**\n     * Returns the private `__checkFormValidityEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __checkFormValidityEventName      The private `__checkFormValidityEventName` property.\n     */\n    this.getCheckFormValidityEventName = () => __checkFormValidityEventName;\n\n    /**\n     * Element 'onchange' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __changeEventName = 'change';\n\n    /**\n     * Returns the private `__changeEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __changeEventName       The private `__changeEventName` property.\n     */\n    this.getChangeEventName = () => __changeEventName;\n\n    /**\n     * The `keypress` event name specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __keyPressEventName = 'keypress';\n\n    /**\n     * Returns the private `__keyPressEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __keyPressEventName       The private `__keyPressEventName` property.\n     */\n    this.getKeyPressEventName = () => __keyPressEventName;\n\n    /**\n     * Element 'onkeyup' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __keyUpEventName = 'keyup';\n\n    /**\n     * Returns the private `__keyUpEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __keyUpEventName        The private `__keyUpEventName` property.\n     */\n    this.getKeyUpEventName = () => __keyUpEventName;\n\n    /**\n     * Element 'onfocus' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __focusEventName = 'focus';\n\n    /**\n     * Returns the private `__focusEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __focusEventName        The private `__focusEventName` property.\n     */\n    this.getFocusEventName = () => __focusEventName;\n\n    /**\n     * Element 'onblur' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __blurEventName = 'blur';\n\n    /**\n     * Returns the private `__blurEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __blurEventName       The private `__blurEventName` property.\n     */\n    this.getBlurEventName = () => __blurEventName;\n\n    /**\n     * Element 'onmouseenter' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __mouseEnterEventName = 'mouseenter';\n\n    /**\n     * Returns the private `__mouseEnterEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __mouseEnterEventName       The private `__mouseEnterEventName` property.\n     */\n    this.getMouseEnterEventName = () => __mouseEnterEventName;\n\n    /**\n     * Element 'onmouseleave' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __mouseLeaveEventName = 'mouseleave';\n\n    /**\n     * Returns the private `__mouseLeaveEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __mouseLeaveEventName       The private `__mouseLeaveEventName` property.\n     */\n    this.getMouseLeaveEventName = () => __mouseLeaveEventName;\n\n    /**\n     * Element 'ontouchstart' events specific to Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __touchStartEventName = 'touchstart';\n\n    /**\n     * Returns the private `__touchStartEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __touchStartEventName         The private `__touchStartEventName` property.\n     */\n    this.getTouchStartEventName = () => __touchStartEventName;\n\n    /**\n     * All input events get a handler which can handle this event, which is\n     * for triggering validation checking on the target element.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __validationEventName = 'validation-handler';\n\n    /**\n     * Returns the private `__validationEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __validationEventName     The private `__validationEventName` property.\n     */\n    this.getValidationEventName = () => __validationEventName;\n\n    /**\n     * All input events get a handler which can handle this event, which is\n     * for setting the flag on the target element indicating whether it is valid.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __setValidationFlagEventName = 'set-validation-flag';\n\n    /**\n     * Returns the private `__setValidationFlagEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __setValidationFlagEventName      The private `__setValidationFlagEventName` property.\n     */\n    this.getSetValidationFlagEventName = () => __setValidationFlagEventName;\n\n    /**\n     * Event specifying when the validity flag for an element has changed.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventDefinitions}\n     */\n    const __validityChangedEventName = 'validity-changed';\n\n    /**\n     * Returns the private `__validityChangedEventName` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventDefinitions}\n     *\n     * @returns     {String}      __validityChangedEventName     The private `__validityChangedEventName` property.\n     */\n    this.getValidityChangedEventName = () => __validityChangedEventName;\n  });\n\nmodule.exports = eventDefinitionsStamp;\n","'use strict';\n\nconst consoleLoggerStamp = require('../logging/console');\nconst domNavigationStamp = require('../utilities/dom-navigation');\nconst eventDefinitionsStamp = require('./event-definitions-stamp');\nconst formComponentStamp = require('../components/form');\n\nconst stampit = require('stampit');\n\n/**\n * Provides an interface for managing form element events\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.formEventsHandler\n * @mixin         Formation.formEventsHandler\n *\n * @mixes         Formation.formComponent\n * @mixes         Formation.domNavigation\n * @mixes         Formation.toggleableConsole\n * @mixes         Formation.eventDefinitions\n */\nconst formEventsHandlerStamp = stampit()\n  .refs({\n\n    /**\n     * A singleton passed along so we have some semblance of\n     * a global Formation event emitter.\n     *\n     * @access      public\n     * @type        {Formation.eventEmitter}\n     * @memberOf    {Formation.formEventsHandler}\n     * @default     null\n     */\n    nodeEvents : null,\n  })\n  .methods({\n\n    /**\n     * A method for retrieving the formComponent of an element.\n     *\n     * @access      public\n     * @type        {function}\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @returns     {Formation.formEventsHandler}\n     */\n    getFormComponentOfCurrentElement() { return this; },\n\n    /**\n     * Emit a node event when the form is submitted.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event       The `submit` event object. Required.\n     *\n     * @returns     {Boolean}     true\n     */\n    formSubmitHandler(event) {\n      this.nodeEvents.emit(this.nodeEvents.getNodeFormSubmitEvent(), event);\n\n      return true;\n    },\n\n    /**\n     * Performs a final check to make sure all visible required fields are validated.\n     *\n     * Hidden required fields are only * actually * required when they're being displayed\n     * to the user. This is generally because an optional field toggles it, and thus\n     * only needs to be filled out when the user takes action to show it.\n     *\n     * Dispatches a `set-validation-flag` event with the result.\n     *\n     * If there is a submit button specified for the current form that is already submitting,\n     * we don't want to repeat this action so we do nothing. If it is not already submitting,\n     * and all necessary fields are valid, this will enable the submit button. Otherwise, the\n     * submit button is disabled.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}         event         The `check-form-validity` event object. Required.\n     */\n    checkFormValidityHandler(event) {\n      const submitButton = this.getSubmitButton();\n      const processSubmitButton = (submitButton !== null && submitButton.exists());\n      if (processSubmitButton && submitButton.isSubmitting()) {\n        // We have a submit button and it's already submitting,\n        // don't dispatch the validity event or change the state of the button.\n        return;\n      }\n\n      // Get the list of required, enabled, and visible fields.\n      const visibleRequiredFields = this.getRequiredFields().filter(this.visibleEnabledFilter);\n\n      // Grab the list of valid visible required fields.\n      const validRequiredFields = visibleRequiredFields.filter(e => e.matches(`[${this.validAttrKey}=\"1\"]`));\n\n      // Everything is basically valid if all required fields are valid...\n      const validAfterRuleCheck = (visibleRequiredFields.length === validRequiredFields.length);\n\n      if (processSubmitButton) {\n        submitButton.setEnabled(validAfterRuleCheck);\n      }\n\n      const setValidationFlagEvent = new CustomEvent(\n        this.getSetValidationFlagEventName(),\n        { bubbles: true, cancelable: true, detail: { validAfterRuleCheck: validAfterRuleCheck } }\n      );\n      this.getForm().dispatchEvent(setValidationFlagEvent);\n    },\n\n    /**\n     * Checks for linked input elements and shows/hides them based on the status of the checkbox.\n     *\n     * Triggers a form validation check on the checkbox whose checked property was just changed.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `change` event object. Required.\n     */\n    checkBoxChangeHandler(event) {\n      const checkbox = event.target;\n\n      // Check for linked elements and show/hide them appropriately.\n      this.showOrHideLinkedElement(checkbox, checkbox.checked);\n\n      // Trigger the form validation event.\n      const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n      checkbox.dispatchEvent(validationEvent);\n    },\n\n    /**\n     * Checks for linked input elements and shows/hides them based on the status of the radio.\n     *\n     * Triggers a form validation check on the radio button whose value was just changed.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `change` event object. Required.\n     */\n    radioChangeHandler(event) {\n      const radio = event.target;\n\n      // Check for linked elements and show/hide them appropriately.\n      this.getAllCheckboxesOrRadiosByName(radio).forEach(r => {\n        this.showOrHideLinkedElement(r, r.checked);\n      });\n\n      const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n      radio.dispatchEvent(validationEvent);\n    },\n\n    /**\n     * Triggers a form validation check on the select element whose value was just changed.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `change` event object. Required.\n     */\n    selectChangeHandler(event) {\n      const select = event.target;\n\n      const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n      select.dispatchEvent(validationEvent);\n    },\n\n    /**\n     * Triggers a form validation check on the input or textarea whose value has\n     * changed due to the value of the element changing.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `change` event object. Required.\n     */\n    inputTextareaChangeHandler(event) {\n      const target = event.target;\n\n      const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n      target.dispatchEvent(validationEvent);\n    },\n\n    /**\n     * Triggers a form validation check on the input or textarea whose value has\n     * changed due to the user triggering a `keyup` event.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `keyup` event object. Required.\n     */\n    inputTextareaKeyUpHandler(event) {\n      const target = event.target;\n\n      const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n      target.dispatchEvent(validationEvent);\n    },\n\n    /**\n     * Trigger validation checks when the user focuses on a field.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `focus` event object. Required.\n     */\n    inputFocusHandler(event) {\n      const input = event.target;\n\n      const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n      input.dispatchEvent(validationEvent);\n    },\n\n    /**\n     * Handle the form `validation-handler` event which will trigger a validator for\n     * the specific element/type being validated.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}         event         The `validation-handler` Formation event object. Required.\n     */\n    inputElementValidationHandler(event) {\n      const triggeringFormInput = event.target;\n\n      // Validate this element\n      this.validate(triggeringFormInput);\n\n      // Check the validity of the whole form\n      const checkValidityEvent = new CustomEvent(this.getCheckFormValidityEventName(), { bubbles: true, cancelable: true });\n      this.getForm().dispatchEvent(checkValidityEvent);\n    },\n\n    /**\n     * Set the state of validation on the element with the new value.\n     *\n     * If the validity state actually changes, trigger the `validity-changed` event.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}                 event                   The `set-validation-flag` Formation event object. Required.\n     */\n    setValidationFlagHandler(event) {\n      const element = event.target;\n      const validAfterRuleCheck = event.detail.validAfterRuleCheck;\n      const type = this.getInputType(element);\n      const elementToCheckAndSetAttr = (\n        ['checkbox', 'radio'].indexOf(type) === -1 ? element : this.getCheckboxOrRadioContainer(element)\n      );\n\n      const validBeforeRuleCheck = (parseInt(elementToCheckAndSetAttr.getAttribute(this.validAttrKey)) === 1);\n\n      // Set the value\n      elementToCheckAndSetAttr.setAttribute(this.validAttrKey, (validAfterRuleCheck === true ? 1 : 0));\n\n      // If the value changed, trigger the validity changed event on the EVENT element\n      const validityChanged = (validBeforeRuleCheck ^ validAfterRuleCheck);\n      if (validityChanged) {\n        const validityChangedEvent = new CustomEvent(\n          this.getValidityChangedEventName(),\n          { bubbles: true, cancelable: true }\n        );\n        element.dispatchEvent(validityChangedEvent);\n      }\n    },\n\n    /**\n     * For each of the required and optional fields passed in with the event data,\n     * trigger the validation handler. This can be used to ensure that the form fields\n     * validation is checked even when the field doesn't know it's been changed, eg when\n     * a browser's autofill inputs values for known fields.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Event}       event         The `mouseenter`, `mouseleave`, or `touchstart` event object. Required.\n     */\n    validateFormFields(event) {\n      const fields = Array.from(this.getRequiredFields()).concat(Array.from(this.getOptionalFields()));\n      fields.forEach(field => {\n        const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n        field.dispatchEvent(validationEvent);\n      });\n    },\n\n    /**\n     * For all the inputs we are handling, trigger an event which will trigger\n     * element/type specific validation.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @returns     {Formation.formEventsHandler}\n     */\n    triggerValidationCheck() {\n      this.getAllInputElementsToValidate().forEach(field => {\n        const validationEvent = new CustomEvent(this.getValidationEventName(), { bubbles: true, cancelable: true });\n        field.dispatchEvent(validationEvent);\n      });\n\n      return this;\n    },\n\n    /**\n     * Attempt to validate the specified form element. When done, trigger an event\n     * to set the state of validation on the element with the result of the check.\n     *\n     * The `this` object is expected to refer to an instance of this class.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @param       {Element}       element      The element to validate. Required.\n     */\n    validate(element) {\n      const lowerTag = element.tagName.toLowerCase();\n      const type = this.getInputType(element);\n\n      if (type === null) {\n        this.warn(`No rules class exists for the tag \\`${lowerTag}\\`.`);\n        return;\n      }\n\n      const registeredRules = this.getRuleSetBySupportedElementType(type);\n      const validAfterRuleCheck = registeredRules.process(element);\n\n      const setValidationFlagEvent = new CustomEvent(\n        this.getSetValidationFlagEventName(),\n        { bubbles: true, cancelable: true, detail: { validAfterRuleCheck: validAfterRuleCheck } }\n      );\n\n      element.dispatchEvent(setValidationFlagEvent);\n    }\n  })\n  .init(function() {\n\n    /**\n     * Helper function that users of this Stamp can use to determine if an object is composed\n     * of this Stamp.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     *\n     * @returns     {Boolean}       true\n     */\n    this.isFormEventHandler = () => true;\n\n    /**\n     * Types of `input` elements that take in characters from the keyboard.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {Array}\n     * @memberOf    {Formation.formEventsHandler}\n     */\n    const __inputTypes = ['text', 'password', 'email', 'number', 'tel'];\n\n    /**\n     * Return the private `__inputTypes` var.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     *\n     * @returns     {Array}       __inputTypes\n     */\n    this.getInputTypesArr = () => __inputTypes;\n\n    /**\n     * Return a Formation-friendly string indicating the type of an element.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     *\n     * @param       {Element}           element       The element to check. Required.\n     *\n     * @returns     {String|null}       type          The determined input type.\n     */\n    this.getInputType = element => {\n      const lowerTag = element.tagName.toLowerCase();\n      const elementType = element.getAttribute('type');\n\n      let type = null;\n      if (lowerTag === 'textarea' ||\n          (lowerTag === 'input' && this.getInputTypesArr().indexOf(elementType) !== -1)) {\n        type = 'text';\n      }\n      else if (elementType === 'checkbox') {\n        type = 'checkbox';\n      }\n      else if (elementType === 'radio') {\n        type = 'radio';\n      }\n      else if (lowerTag === 'select') {\n        type = 'select';\n      }\n\n      return type;\n    };\n\n    /**\n     * Checks whether this instance has been initialized, or if there is a `formEventsHandlerStamp` attached to\n     * the `form` element already which has been initialized.\n     *\n     * @private\n     * @access      private\n     * @type        {Function}\n     * @memberOf    {Formation.formEventsHandler}\n     *\n     * @returns     {Boolean}                     False iff neither this instance, nor the `formComponent` attached to the `form`, have been initialized.\n     */\n    let __formEventsAlreadyInitialized = () => {\n      let alreadyInit = this.getEventsInitialized();\n      try {\n        let formEventsHandler;\n        const form = this.getForm();\n        alreadyInit = (\n          alreadyInit || (\n            form !== null &&\n            (formEventsHandler = this.getFormComponentOfCurrentElement(form)) !== null &&\n            formEventsHandler.getEventsInitialized()\n          )\n        );\n      }\n      catch (e) {\n        this.info(e);\n      }\n      return alreadyInit;\n    };\n\n    this.formEventsAlreadyInitialized = __formEventsAlreadyInitialized;\n\n    /**\n     * Initializes the `Formation.formComponent` and then adds the default event handlers\n     * for a form's various input element, iff that has not already taken place.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     *\n     * @param       {Element}         form      The `form` element to be initialized and event handlers added. Required.\n     *\n     * @returns     {Formation.formEventsHandler}\n     */\n    this.initFormComponent = form => {\n      if (__formEventsAlreadyInitialized()) {\n        this.warn('Form events previously initialized for this form, skipping.');\n        return this;\n      }\n\n      this\n        .initLogging(this.getLogConsole())\n        .initForm(form)\n        .addDefaultEventHandlers()\n        .triggerValidationCheck();\n\n      return this;\n    };\n\n    /**\n     * The form element types which get validated.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {Array}\n     * @memberOf    {Formation.formEventsHandler}\n     */\n    const __inputElementTypesToValidate = ['input', 'textarea', 'select'];\n\n    /**\n     * Finds all form input elements to be validated and returns a NodeList containing them.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     *\n     * @returns     {Array}\n     */\n    this.getAllInputElementsToValidate = () => {\n      const inputElementTypesToValidate = __inputElementTypesToValidate.join(', ');\n\n      return Array.from(this.getForm().querySelectorAll(inputElementTypesToValidate));\n    };\n\n    /**\n     * Adds a form submit event handler, as well as various change, keyup, focus, and\n     * movement events to the various form input element types, as well as Formation-specific\n     * events.\n     *\n     * Sets the initialized flag to be `true`.\n     *\n     * @access      public\n     * @memberOf    {Formation.formEventsHandler}\n     * @mixes       {Formation.formEventsHandler}\n     *\n     * @returns     {Formation.formEventsHandler}     this        Return the instance of the generated object so we can chain methods.\n     */\n    this.addDefaultEventHandlers = () => {\n      const joinStr = ', ';\n      const allInputElementsSelector = __inputElementTypesToValidate.join(joinStr);\n      const textElementsSelector = __inputTypes\n          .map(type => `input[type=\"${type}\"]`)\n          .join(joinStr) + `, textarea`;\n\n      // Add normal form and element listeners\n      const currentForm = this.getForm();\n      currentForm.addEventListener('submit', event => this.formSubmitHandler(event));\n      currentForm.addEventListener(this.getChangeEventName(), event => {\n        const target = event.target;\n        if (target.tagName.toLowerCase() === 'input' && target.getAttribute('type') === 'checkbox') {\n          this.checkBoxChangeHandler(event);\n        }\n        else if (target.tagName.toLowerCase() === 'input' && target.getAttribute('type') === 'radio') {\n          this.radioChangeHandler(event);\n        }\n        else if (target.matches(textElementsSelector)) {\n          this.inputTextareaChangeHandler(event);\n        }\n        else if (target.tagName.toLowerCase() === 'select') {\n          this.selectChangeHandler(event);\n        }\n      });\n      currentForm.addEventListener(this.getKeyUpEventName(), event => {\n        if (['input', 'textarea'].indexOf(event.target.tagName.toLowerCase()) !== -1) {\n          this.inputTextareaKeyUpHandler(event);\n        }\n      });\n      currentForm.addEventListener(this.getFocusEventName(), event => {\n        if (event.target.matches(allInputElementsSelector)) {\n          this.inputFocusHandler(event);\n        }\n      });\n\n      // Add event listeners for detecting validation events and setting the validation flag\n      currentForm.addEventListener(this.getValidationEventName(), event => {\n        if (event.target.matches(allInputElementsSelector)) {\n          this.inputElementValidationHandler(event);\n        }\n      });\n      currentForm.addEventListener(this.getCheckFormValidityEventName(), event => this.checkFormValidityHandler(event));\n      currentForm.addEventListener(this.getSetValidationFlagEventName(), event => {\n        if (event.target === currentForm || event.target.matches(allInputElementsSelector)) {\n          this.setValidationFlagHandler(event);\n        }\n      });\n\n      const currentFormParent = currentForm.parentNode;\n      if (currentFormParent) {\n        const mouseMoveTouchEvents = [\n          this.getMouseEnterEventName(),\n          this.getMouseLeaveEventName(),\n          this.getTouchStartEventName()\n        ];\n        mouseMoveTouchEvents.forEach(mte => {\n          currentFormParent.addEventListener(mte, event => this.validateFormFields(event));\n        });\n      }\n\n      this.setEventsInitialized(true);\n\n      return this;\n    };\n  });\n\nmodule.exports = formEventsHandlerStamp.compose(\n  formComponentStamp,\n  eventDefinitionsStamp,\n  domNavigationStamp,\n  consoleLoggerStamp\n);\n","'use strict';\n\nconst bodyEventsHandlerStamp = require('./event-handlers/body-events-handler');\nconst consoleLoggerStamp = require('./logging/console');\nconst domNavigationStamp = require('./utilities/dom-navigation');\nconst formEventsHandlerStamp = require('./event-handlers/form-events-handler');\nconst ruleStamp = require('./rules/rule');\n\nconst stampit = require('stampit');\n\n/**\n * This stamp lets you initialize Formation, and turn debug on or off.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.formation\n * @mixin         Formation.formation\n *\n * @mixes         Formation.domNavigation\n * @mixes         Formation.toggleableConsole\n */\nconst formationStamp = stampit()\n  .refs({\n\n    /**\n     * The element DOM attribute key which specifies whether a form is managed\n     * by Formation (1) or not (0).\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.formation}\n     * @default     data-formation\n     */\n    formationDataAttrKey : 'data-formation',\n\n    /**\n     * A singleton passed along so we have some semblance of\n     * a global Formation event emitter.\n     *\n     * @access      public\n     * @type        {Formation.eventEmitter}\n     * @memberOf    {Formation.formation}\n     * @default     null\n     */\n    nodeEvents : null\n  })\n  .methods({\n\n    /**\n     * When the DOM is ready, set console logging based on the debug setting and\n     * initialize Formation.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @returns     {Formation.formation}    this            Return the instance of the generated object so we can chain methods.\n     */\n    readyDocument() {\n      // DOM is ready, so Enter Formation!\n      this.enterFormation();\n\n      return this;\n    },\n\n    /**\n     * Initialization of the Formation forms.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @returns     {Formation.formation}    this            Return the instance of the generated object so we can chain methods.\n     */\n    enterFormation() {\n      this.log('Initializing Formation...');\n\n      // First find out which forms should be initialized.\n      this.detectForms();\n      if (this.getForms().size === 0) {\n        this.info('No Formation forms present, exiting.');\n        return this;\n      }\n\n      const bodyEventsHandler = bodyEventsHandlerStamp({\n        body: document.body,\n        formationDataAttrKey: this.formationDataAttrKey,\n        nodeEvents : this.nodeEvents\n      });\n      this.initBodyEvents(bodyEventsHandler);\n      this.initForms();\n\n      return this;\n    },\n\n    /**\n     * Allow consumers of Formation to initialize forms that may be added\n     * to the DOM after auto-initialization of the DOM.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @param       {Element}                 form          The `form` element to be initialized. Required.\n     *\n     * @returns     {Formation.formation}     this\n     */\n    initForm(form) {\n      try {\n        if (! this.getForms().has(form) || this.getForms().get(form) === null) {\n          // Set up the Form but only if it has the proper DOM.\n          const formationComponent = this.createFormationComponent();\n\n          formationComponent.initFormComponent(form);\n\n          this.getForms().set(form, formationComponent);\n        }\n      }\n      catch (exception) {\n        this.error(exception);\n      }\n\n      return this;\n    },\n\n    /**\n     * Simple factory function to create a new `Formation.formEventsHandler`\n     * instance - this is purely for ease of unit testing.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @returns     {Formation.formEventsHandler}\n     */\n    createFormationComponent() {\n      return formEventsHandlerStamp({\n        formationDataAttrKey: this.formationDataAttrKey,\n        nodeEvents : this.nodeEvents,\n        getFormComponentOfCurrentElement: this.getFormComponentOfCurrentElement\n      }).initLogging(this.getLogConsole());\n    },\n\n    /**\n     * Simple factory function to create a new `Formation.formEventsHandler`\n     * instance - this is purely for ease of unit testing.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @returns     {Formation.rule}\n     */\n    createFormationRule(name, callback) {\n      return ruleStamp({name: name, callback: callback});\n    },\n\n    /**\n     * Attempt to register the `ruleName` rule with each form's formComponent.\n     * Handle when things go wrong. Adds a new `document.ready` method so it\n     * happens after initialization.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @param       {String}      elementType             The type of element to which this rule applies. Required.\n     * @param       {String}      ruleName                The name of the rule to be registered. Required.\n     * @param       {Function}    ruleCallbackMethod      The callback method to be run when the rule is checked. Required.\n     *\n     * @returns     {Formation.formation}    this\n     */\n    registerRule(elementType, ruleName, ruleCallbackMethod) {\n      if (typeof elementType !== 'string') {\n        throw TypeError('Expected `elementType` param to be a `String`, was a `' + typeof elementType + '`.');\n      }\n      if (this.getSupportedElementTypes().indexOf(elementType) === -1) {\n        throw TypeError('Specified `elementType` `' + elementType + '` is not supported.');\n      }\n      if (typeof ruleName !== 'string') {\n        throw TypeError('Expected `ruleName` param to be a `String`, was a `' + typeof ruleName + '`.');\n      }\n      if (typeof ruleCallbackMethod !== 'function') {\n        throw TypeError('Expected `ruleCallbackMethod` param to be a `Function`, was a `' + typeof ruleCallbackMethod + '`.');\n      }\n\n      const registerRuleFunc = () => {\n        this.getForms().forEach(formComponent => {\n          const rule = this.createFormationRule(ruleName, ruleCallbackMethod);\n          formComponent.registerRule(elementType, rule);\n        });\n        // Remove the DOMContentLoaded event.\n        document.removeEventListener('DOMContentLoaded', registerRuleFunc);\n      };\n\n      // Add the new DOMContentLoaded event.\n      document.addEventListener('DOMContentLoaded', registerRuleFunc);\n\n      return this;\n    }\n  })\n  .init(function() {\n\n    /**\n     * Flag indicating whether to log debug messages and exceptions.\n     *\n     * @access      private\n     * @type        Boolean\n     * @memberOf    {Formation.formation}\n     * @default     false\n     */\n    let debug = false;\n\n    /**\n     * Return the value of the private `debug` flag.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @returns     {Boolean}        debug           Flag indicating whether we're turning debug on or off.\n     */\n    this.getDebug = () => debug;\n\n    /**\n     * Set the private `debug` flag on the Formation object.\n     *\n     * @throws      TypeError                         if the `newVal` param is not a boolean.\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @param       {Boolean}               newVal          Flag indicating whether we're turning debug on or off. Required.\n     *\n     * @returns     {Formation.formation}   this            Return the instance of the generated object so we can chain methods.\n     */\n    this.setDebug = newVal => {\n      const callStackCurrent = 'Formation.formation.setDebug';\n      if (typeof newVal !== 'boolean') {\n        throw new TypeError(callStackCurrent + '() - Expected `newVal` param to be a Boolean, but is `' + typeof(newVal) + '`.');\n      }\n\n      debug = newVal;\n\n      this.nodeEvents.emit(this.nodeEvents.getNodeSetDebugEvent(), newVal);\n\n      // So we can chain methods.\n      return this;\n    };\n\n    /**\n     * A map of `form` elements with their respective FormComponents to be managed by Formation.\n     *\n     * @access      private\n     * @type        Map\n     * @memberOf    {Formation.formation}\n     */\n    const __forms = new Map();\n\n    /**\n     * Return the value of the private `__forms` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @returns     {Map}       __forms           A map of `form` elements with their related FormComponents to be managed by Formation.\n     */\n    this.getForms = () => __forms;\n\n    /**\n     * Find the `formComponent` for the `form` element in which the supplied `element` resides.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @param       {Element}                         element             The DOM element for which to find the `formComponent` instance. Required.\n     *\n     * @returns     {Formation.formComponent|null}                        The `formComponent` if it is there, or null otherwise.\n     */\n    this.getFormComponentOfCurrentElement = element => {\n      const currentForm = this.findCurrentFormByTarget(element);\n      if (currentForm === null) { return null; }\n\n      if (! this.getForms().has(currentForm)) { return null; }\n\n      return this.getForms().get(currentForm);\n    };\n\n    /**\n     * Find all the `form` elements in the DOM that are to be managed/validated by Formation, and set the private\n     * `forms` property.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @returns     {Formation.formation}  this            Return the instance of the generated object so we can chain methods.\n     */\n    this.detectForms = () => {\n      const forms = Array.from(document.getElementsByTagName('form')).filter(this.formFilter);\n      forms.forEach(form => {\n        if (! __forms.has(form)) {\n          __forms.set(form, null);\n        }\n      });\n\n      // So we can chain methods.\n      return this;\n    };\n\n    /**\n     * Helper function to filter an array of form elements to return only forms to be managed\n     * by Formation.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @param       {Element}       form          The DOM form element to check.\n     *\n     * @returns     {Boolean}\n     */\n    this.formFilter = form => {\n      return (\n        form.tagName.toLowerCase() === 'form' &&\n        form.hasAttribute(this.formationDataAttrKey) &&\n        parseInt(form.getAttribute(this.formationDataAttrKey)) === 1\n      );\n    };\n\n    /**\n     * The types of elements that are supported by Formation.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {Array}\n     * @memberOf    {Formation.formation}\n     */\n    const __supportedElementTypes = [\n      'text',\n      'checkbox',\n      'radio',\n      'select'\n    ];\n\n    /**\n     * Return the value of the private `__supportedElementTypes` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @returns     {Array}       __supportedElementTypes         Types of elements supported by Formation.\n     */\n    this.getSupportedElementTypes = () => __supportedElementTypes;\n\n    /**\n     * Object composed of a {bodyEventsHandlerStamp} which handles body events.\n     *\n     * @access      public\n     * @type        {Object}\n     * @memberOf    {Formation.formation}\n     * @default     null\n     */\n    let __bodyEventsHandler = null;\n\n    /**\n     * Add the default event handlers for the `body` element, iff that has not already taken place.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @param       {Formation.bodyEventsHandler}     bodyEventsHandler     Object which is composed of a `bodyEventsHandlerStamp`. Required.\n     *\n     * @returns     {Formation.formation}\n     */\n    this.initBodyEvents = (bodyEventsHandler) => {\n      this.log('Initializing body events...');\n\n      // TODO - do check on `bodyEventsHandler` before setting `__bodyEventsHandler`\n      __bodyEventsHandler = bodyEventsHandler;\n      __bodyEventsHandler.initLogging(this.getLogConsole());\n\n      if (__bodyEventsHandler.getEventsInitialized()) {\n        this.info('Body events previously initialized, skipping.');\n        return this;\n      }\n\n      // The events have not yet been added, so do so now.\n      __bodyEventsHandler.addDefaultEventHandlers();\n\n      return this;\n    };\n\n    /**\n     * For each registered Formation `form`, initialize its DOM and the\n     * various events which should be handled.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     *\n     * @returns     {Formation.formation}\n     */\n    this.initForms = () => {\n      // Set up the individual forms.\n      __forms.forEach((formComponent, form) => {\n        this.initForm(form);\n      });\n\n      return this;\n    };\n  });\n\nconst formationLoggerStamp = formationStamp.compose(domNavigationStamp, consoleLoggerStamp);\n\nmodule.exports = formationLoggerStamp;\n","'use strict';\n\nconst eventEmitterStamp = require('./utilities/node-event-emitter-stamp');\nconst formationLoggerStamp = require('./formation-stamp.js');\n\nconst eventEmitter = eventEmitterStamp();\nconst Formation = formationLoggerStamp({nodeEvents : eventEmitter});\nFormation.initLogging(Formation.getDebug());\n\n/**\n * Add a document.ready event handler and set Formation to handle the\n * event so it can initialize the DOM.\n */\ndocument.addEventListener('DOMContentLoaded', function() { Formation.readyDocument(); });\n\n/**\n * Formation!\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @module        Formation\n * @namespace     Formation\n */\nmodule.exports = Formation;\n","'use strict';\n\nlet stampit = require('stampit');\n\n/**\n * Provides a wrapper for the `console` log functions that takes into account a flag that can\n * be set based on any arbitrary reason (e.g. environment, existence of a module, etc).\n *\n * @copyright     Copyright (c) 2016, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.toggleableConsole\n * @mixin         Formation.toggleableConsole\n */\nconst toggleableConsoleStamp = stampit()\n  .refs({\n\n    /**\n     * The original `console` object which we are wrapping.\n     *\n     * @access      public\n     * @type        {Object}\n     * @memberOf    {Formation.toggleableConsole}\n     * @default     console\n     */\n    console: console,\n\n    /**\n     * A singleton passed along so we have some semblance of\n     * a global Formation event emitter.\n     *\n     * @access      public\n     * @type        {Formation.eventEmitter}\n     * @memberOf    {Formation.toggleableConsole}\n     * @default     null\n     */\n    nodeEvents : null\n  })\n  .methods({\n\n    /**\n     * If console logging is enabled, output an `error` message to the console.\n     *\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     * @mixes       {Formation.toggleableConsole}\n     *\n     * @param       {*}           message         The message/object/array/whatever to log as an error. Required.\n     */\n    error(message) {\n      if (this.getLogConsole()) {\n        this.console.error(message);\n      }\n    },\n\n    /**\n     * If console logging is enabled, output an `info` message to the console.\n     *\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     * @mixes       {Formation.toggleableConsole}\n     *\n     * @param       {*}           message         The message/object/array/whatever to log as information. Required.\n     */\n    info(message) {\n      if (this.getLogConsole()) {\n        this.console.info(message);\n      }\n    },\n\n    /**\n     * If console logging is enabled, output a message to the console.\n     *\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     * @mixes       {Formation.toggleableConsole}\n     *\n     * @param       {*}           message         The message/object/array/whatever to log as a message. Required.\n     */\n    log(message) {\n      if (this.getLogConsole()) {\n        this.console.log(message);\n      }\n    },\n\n    /**\n     * If console logging is enabled, output a `warn` message to the console.\n     *\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     * @mixes       {Formation.toggleableConsole}\n     *\n     * @param       {*}           message         The message/object/array/whatever to log as a warning. Required.\n     */\n    warn(message) {\n      if (this.getLogConsole()) {\n        this.console.warn(message);\n      }\n    }\n  })\n  .init(function() {\n\n    /**\n     * Flag indicating whether or not to call the wrapped method.\n     *\n     * @access      private\n     * @type        Boolean\n     * @memberOf    {Formation.toggleableConsole}\n     * @default     false\n     */\n    let logConsole = false;\n\n    /**\n     * Return the value of the private `logConsole` flag.\n     *\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     *\n     * @returns     {Boolean}        debug           Flag indicating whether we're using the console logging methods.\n     */\n    this.getLogConsole = () => {\n      return logConsole;\n    };\n\n    /**\n     * Set the private `logConsole` flag on the Formation object.\n     *\n     * @throws      TypeError                               if the `newVal` param is not a boolean.\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     *\n     * @param       {Boolean}                         newVal      Flag indicating whether we're turning console logging on or off. Required.\n     *\n     * @returns     {Formation.toggleableConsole}     this        Return the instance of the generated object so we can chain methods.\n     */\n    this.setLogConsole = (newVal) => {\n      const callStackCurrent = 'toggleableConsoleStamp.setLogConsole';\n      if (typeof newVal !== 'boolean') {\n        throw new TypeError(callStackCurrent + '() - Expected `newVal` param to be a Boolean, but is `' + typeof(newVal) + '`.');\n      }\n\n      logConsole = newVal;\n\n      // So we can chain methods.\n      return this;\n    };\n\n    /**\n     * Helper function that sets initial console logging and listens for an\n     * event which can turn it on or off.\n     *\n     * @access      public\n     * @memberOf    {Formation.toggleableConsole}\n     *\n     * @param       {Boolean}                         initial     Initial console logging flag. Required.\n     *\n     * @returns     {Formation.toggleableConsole}     this        Return the instance of the generated object so we can chain methods.\n     */\n    this.initLogging = (initial) => {\n      this.setLogConsole(initial);\n      this.nodeEvents.on(this.nodeEvents.getNodeSetDebugEvent(), this.setLogConsole);\n\n      return this;\n    };\n  });\n\nmodule.exports = toggleableConsoleStamp;\n","'use strict';\n\nconst ruleStamp = require('./rule');\nconst ruleSetStamp = require('./rule-set');\n\nconst stampit = require('stampit');\n\n/**\n * Used for processing a set of `Formation.rule` objects against `input:checkbox` elements.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.checkboxDefaultRules\n * @mixin         Formation.checkboxDefaultRules\n *\n * @mixes         Formation.ruleSet\n */\nconst checkboxDefaultRulesStamp = stampit()\n  .methods({\n\n    /**\n     * The default checkbox button elements rule is that at least one of them is checked.\n     *\n     * @access      public\n     * @memberOf    {Formation.checkboxDefaultRules}\n     * @mixes       {Formation.checkboxDefaultRules}\n     *\n     * @param       {Element}       checkbox        The `checkbox` element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvDefault(checkbox, attribute) {\n      const checkedCheckboxes = this\n        .getAllCheckboxesOrRadiosByName(checkbox)\n        .filter(c => c.checked);\n\n      return checkedCheckboxes.length >= 1;\n    },\n\n    /**\n     * The default checkbox button elements rule is that at least one of them is checked.\n     *\n     * @access      public\n     * @memberOf    {Formation.checkboxDefaultRules}\n     * @mixes       {Formation.checkboxDefaultRules}\n     *\n     * @param       {Element}       checkbox        The `checkbox` element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvMinSelected(checkbox, attribute) {\n      const attributeOwner = this.getAttributeOwner(checkbox);\n      if (attributeOwner === null) {\n        return true;\n      }\n      const minSelected = parseInt(attributeOwner.getAttribute(attribute));\n\n      const checkedCheckboxes = this\n        .getAllCheckboxesOrRadiosByName(checkbox)\n        .filter(c => c.checked);\n\n      return (isNaN(minSelected) || checkedCheckboxes.length >= minSelected);\n    },\n\n    /**\n     * Passes when the number of checked checkboxes is less than or equal to\n     * the number specified in the attribute.\n     *\n     * @access      public\n     * @memberOf    {Formation.checkboxDefaultRules}\n     * @mixes       {Formation.checkboxDefaultRules}\n     *\n     * @param       {Element}       checkbox        The `checkbox` element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvMaxSelected(checkbox, attribute) {\n      const attributeOwner = this.getAttributeOwner(checkbox);\n      if (attributeOwner === null) {\n        return true;\n      }\n      const maxSelected = parseInt(attributeOwner.getAttribute(attribute));\n\n      const checkedCheckboxes = this.\n        getAllCheckboxesOrRadiosByName(checkbox)\n        .filter(c => c.checked);\n\n      return (isNaN(maxSelected) || checkedCheckboxes.length <= maxSelected);\n    }\n  })\n  .init(function() {\n\n    /**\n     * The default, pre-defined rules Formation will check during validation\n     * of checkbox button elements.\n     *\n     * @private\n     * @access      private\n     * @type        Array\n     * @memberOf    {Formation.checkboxDefaultRules}\n     */\n    let __rules = [\n      ruleStamp({\n        name : 'default',\n        callback : (checkbox, attribute) => this.dataFvDefault(checkbox, attribute)\n      }),\n      ruleStamp({\n        name : 'min-selected',\n        callback : (checkbox, attribute) => this.dataFvMinSelected(checkbox, attribute)\n      }),\n      ruleStamp({\n        name : 'max-selected',\n        callback : (checkbox, attribute) => this.dataFvMaxSelected(checkbox, attribute)\n      })\n    ];\n\n    /**\n     * Return the value of the private `__rules` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.checkboxDefaultRules}\n     *\n     * @returns     {Array}     __rules     The default rules we've defined.\n     */\n    this.getRules = () => __rules;\n\n    /**\n     * Return the DOM element that the `formation` rule attributes and validity flag\n     * will be attached to for the element provided.\n     *\n     * An ancestor element holds attributes for Checkbox buttons.\n     *\n     * @access      public\n     * @memberOf    {Formation.checkboxDefaultRules}\n     *\n     * @param       {Element}   element       The element to check. Required.\n     *\n     * @returns     {Element|null}\n     */\n    this.getAttributeOwner = element => this.getCheckboxOrRadioContainer(element);\n  });\n\nmodule.exports = ruleSetStamp.compose(checkboxDefaultRulesStamp);\n","'use strict';\n\nconst ruleStamp = require('./rule');\nconst ruleSetStamp = require('./rule-set');\n\nconst stampit = require('stampit');\n\n/**\n * Used for processing a set of `Formation.rule` objects against `input:radio` elements.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.radioDefaultRules\n * @mixin         Formation.radioDefaultRules\n *\n * @mixes         Formation.ruleSet\n */\nconst radioDefaultRulesStamp = stampit()\n  .methods({\n\n    /**\n     * The default radio button elements rule is that at least one of them is checked.\n     *\n     * @access      public\n     * @memberOf    {Formation.radioDefaultRules}\n     * @mixes       {Formation.radioDefaultRules}\n     *\n     * @param       {Element}       radio           The `radio` element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvDefault(radio, attribute) {\n      const checkedRadios = this\n        .getAllCheckboxesOrRadiosByName(radio)\n        .filter(r => r.checked);\n\n      return (checkedRadios.length == 1);\n    }\n  })\n  .init(function() {\n\n    /**\n     * The default, pre-defined rules Formation will check during validation\n     * of radio button elements.\n     *\n     * @private\n     * @access      private\n     * @type        Array\n     * @memberOf    {Formation.radioDefaultRules}\n     */\n    let __rules = [\n      ruleStamp({\n        name : 'default',\n        callback : (radio, attribute) => this.dataFvDefault(radio, attribute)\n      })\n    ];\n\n    /**\n     * Return the value of the private `__rules` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.radioDefaultRules}\n     *\n     * @returns     {Array}     __rules     The default rules we've defined.\n     */\n    this.getRules = () => __rules;\n\n    /**\n     * Return the DOM element that the `formation` rule attributes and validity flag\n     * will be attached to for the element provided.\n     *\n     * An ancestor element holds attributes for Radio buttons.\n     *\n     * @access      public\n     * @memberOf    {Formation.radioDefaultRules}\n     *\n     * @param       {Element}     element      The element to check. Required.\n     *\n     * @returns     {Element|null}\n     */\n    this.getAttributeOwner = element => this.getCheckboxOrRadioContainer(element);\n  });\n\nmodule.exports = ruleSetStamp.compose(radioDefaultRulesStamp);\n","'use strict';\n\nconst domNavigationStamp = require('../utilities/dom-navigation');\nconst eventDefinitionsStamp = require('../event-handlers/event-definitions-stamp');\nconst validityChecksStamp = require('../utilities/validity-checks');\n\nconst stampit = require('stampit');\n\n/**\n * Used for processing a set of `Formation.rule` objects against form DOM elements.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.ruleSet\n * @mixin         Formation.ruleSet\n *\n * @mixes         Formation.domNavigation\n * @mixes         Formation.eventDefinitions\n * @mixes         Formation.validityChecks\n */\nconst ruleSetStamp = stampit()\n  .init(function() {\n\n    /**\n     * Helper function that users of this Stamp can use to determine if an object is composed\n     * of this Stamp.\n     *\n     * @access      public\n     * @memberOf    {Formation.ruleSet}\n     *\n     * @returns     {Boolean}       true\n     */\n    this.isFormationRuleSet = () => true;\n\n    /**\n     * An empty set of rules by default.\n     *\n     * @private\n     * @access      private\n     * @type        Array\n     * @memberOf    {Formation.ruleSet}\n     */\n    let __rules = [];\n\n    /**\n     * Add a rule to this rule set.\n     *\n     * @access      public\n     * @memberOf    {Formation.ruleSet}\n     *\n     * @param       {Formation.rule}      rule        The rule to add to this set. Required.\n     *\n     * @returns     {Formation.ruleSet}   this\n     */\n    this.add = rule => {\n      // TODO - warn when the rule has already been added to this set\n      this.getRules().push(rule);\n\n      return this;\n    };\n\n    /**\n     * Return an empty array. This method is a stub.\n     *\n     * @access      public\n     * @memberOf    {Formation.ruleSet}\n     *\n     * @returns     {Array}     __rules       The empty array of rules.\n     */\n    this.getRules = () => {\n      return __rules;\n    };\n\n    /**\n     * Return the DOM element that the `formation` rule attributes and validity flag\n     * will be attached to for the element provided. By default, it is the\n     * element itself.\n     *\n     * @access      public\n     * @memberOf    {Formation.ruleSet}\n     *\n     * @param       {Element}   element         The element to check. Required.\n     *\n     * @returns     {Element}   element\n     */\n    this.getAttributeOwner = element => element;\n\n    /**\n     * Process the element against the set of registered rules that are actually being\n     * requested by the element's `data-fv` attributes. Return true iff the field passes\n     * all rules; false otherwise.\n     *\n     * @access      public\n     * @memberOf    {Formation.ruleSet}\n     *\n     * @param       {Element}   element                 The element upon which to process the rules. Required.\n     *\n     * @returns     {boolean}   validAfterRuleCheck     Whether the element passes all specified rules.\n     */\n    this.process = element => {\n      let validAfterRuleCheck = true;\n      const attributeOwner = this.getAttributeOwner(element);\n      if (attributeOwner !== null) {\n        for (const rule of this.getRules()) {\n          const ruleAttribute = `data-fv-${rule.name}`;\n          if (rule.name === 'default' || attributeOwner.hasAttribute(ruleAttribute)) {\n            validAfterRuleCheck = rule.callback(element, ruleAttribute);\n            if (! validAfterRuleCheck) {\n              break;\n            }\n          }\n        }\n      }\n\n      return validAfterRuleCheck;\n    };\n  });\n\nmodule.exports = ruleSetStamp.compose(\n  domNavigationStamp,\n  eventDefinitionsStamp,\n  validityChecksStamp\n);\n","'use strict';\n\nconst stampit = require('stampit');\n\n/**\n * Defines a rule, which contains a name used to identify when it's used,\n * and a callback function to process the rule against an element.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.rule\n * @mixin         Formation.rule\n */\nconst ruleStamp = stampit()\n  .refs({\n\n    /**\n     * The name of the rule, prefixed with `data-fv`, which will be used to\n     * reference it in a DOM element.\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.rule}\n     * @default     'undefined\n     */\n    name : 'undefined'\n  }).methods({\n\n    /**\n     * The method that will attempt to satisfy the rule against `element`.\n     *\n     * @throws      Error           The method for the rule is not implemented, so alert the user with an error\n     * @access      public\n     * @memberOf    {Formation.rule}\n     * @mixes       {Formation.rule}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    callback(element, attribute) {\n      throw new Error(`Rule callback for \\`${this.name}\\` is not implemented`);\n    }\n  })\n  .init(function() {\n\n    /**\n     * Helper function that users of this Stamp can use to determine if an object is composed\n     * of this Stamp.\n     *\n     * @access      public\n     * @memberOf    {Formation.rule}\n     *\n     * @returns     {Boolean}       true\n     */\n    this.isFormationRule = () => {\n      return true;\n    };\n  });\n\nmodule.exports = ruleStamp;\n","'use strict';\n\nconst ruleStamp = require('./rule');\nconst ruleSetStamp = require('./rule-set');\n\nconst stampit = require('stampit');\n\n/**\n * Used for processing a set of `Formation.rule` objects against `select` elements.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.selectDefaultRules\n * @mixin         Formation.selectDefaultRules\n *\n * @mixes         Formation.ruleSet\n */\nconst selectDefaultRulesStamp = stampit()\n  .methods({\n\n    /**\n     * The default `select` elements rule is that it's trimmed value\n     * must not be empty.\n     *\n     * @access      public\n     * @memberOf    {Formation.selectDefaultRules}\n     * @mixes       {Formation.selectDefaultRules}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvDefault(element, attribute) {\n      return element.value.trim() !== '';\n    }\n  })\n  .init(function() {\n\n    /**\n     * The default, pre-defined rules Formation will check during validation\n     * of text-based input elements.\n     *\n     * @private\n     * @access      private\n     * @type        Array\n     * @memberOf    {Formation.selectDefaultRules}\n     */\n    let __rules = [\n      ruleStamp({\n        name : 'default',\n        callback : (element, attribute) => this.dataFvDefault(element, attribute)\n      })\n    ];\n\n    /**\n     * Return the value of the private `__rules` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.selectDefaultRules}\n     *\n     * @returns     {Array}     __rules     The default rules we've defined.\n     */\n    this.getRules = () => __rules;\n  });\n\nmodule.exports = ruleSetStamp.compose(selectDefaultRulesStamp);\n","'use strict';\n\nconst ruleStamp = require('./rule');\nconst ruleSetStamp = require('./rule-set');\n\nconst stampit = require('stampit');\n\n/**\n * Used for processing a set of `Formation.rule` objects against `select` elements.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.textDefaultRules\n * @mixin         Formation.textDefaultRules\n *\n * @mixes         Formation.ruleSet\n */\nconst textDefaultRulesStamp = stampit()\n  .methods({\n\n    /**\n     * The default text-based input elements rule is that\n     * it's trimmed value must not be empty.\n     *\n     * @access      public\n     * @memberOf    {Formation.textDefaultRules}\n     * @mixes       {Formation.textDefaultRules}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvDefault(element, attribute) {\n      return element.value.trim() !== '';\n    },\n\n    /**\n     * When a field has a minimum length, its trimmed value must be greater than\n     * or equal to the specified attribute value.\n     *\n     * @access      public\n     * @memberOf    {Formation.textDefaultRules}\n     * @mixes       {Formation.textDefaultRules}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvMinLength(element, attribute) {\n      const minChars = element.getAttribute(attribute);\n\n      return (element.value.trim().length >= parseInt(minChars));\n    },\n\n    /**\n     * When a field has a maximum length, its trimmed value must be less than\n     * or equal to the specified attribute value.\n     *\n     * @access      public\n     * @memberOf    {Formation.textDefaultRules}\n     * @mixes       {Formation.textDefaultRules}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}\n     */\n    dataFvMaxLength(element, attribute) {\n      const maxChars = element.getAttribute(attribute);\n\n      return (element.value.trim().length <= parseInt(maxChars));\n    },\n\n    /**\n     * When a field has a format specified, the value will be checked against\n     * that specific format. Some predefined formats include `zip5`, `zip4`,\n     * `zip`, `email`, `phone`. You can specify a Regular Expression string\n     * if you prefer.\n     *\n     * @access      public\n     * @memberOf    {Formation.textDefaultRules}\n     * @mixes       {Formation.textDefaultRules}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}       valid\n     */\n    dataFvFormat(element, attribute) {\n      const format = element.getAttribute(attribute);\n      let valid = true;\n      const trimmedVal = element.value.trim();\n      switch (format) {\n        case 'zip5' :\n          valid = this.isValidZip(trimmedVal, 5);\n          break;\n        case 'zip4' :\n          valid = this.isValidZip(trimmedVal, 4);\n          break;\n        case 'zip' :\n          valid = this.isValidZip(trimmedVal);\n          break;\n        case 'email' :\n          valid = this.isValidEmail(trimmedVal);\n          break;\n        case 'phone' :\n          valid = this.isValidPhone(trimmedVal);\n          break;\n        case 'phone-multi' :\n          valid = this.isValidPhone(trimmedVal, true);\n          break;\n        default:\n          // If it looks like a regex, test the value against it.\n          const formatMatch = format.match(/^\\/(.*)\\/$/);\n          if (formatMatch !== null) {\n            const formatAsRegex = new RegExp(formatMatch[1]);\n            valid = formatAsRegex.test(trimmedVal);\n          }\n      }\n\n      return valid;\n    },\n\n    /**\n     * When a field must match another field, check that the value of\n     * both fields is identical.\n     *\n     * @throws      Error           iff the other field to match is not in the DOM\n     * @access      public\n     * @memberOf    {Formation.textDefaultRules}\n     * @mixes       {Formation.textDefaultRules}\n     *\n     * @param       {Element}       element         The element upon which to apply the rule. Required.\n     * @param       {String}        attribute       The data attribute which may contain additional data. Required.\n     *\n     * @returns     {Boolean}       valid\n     */\n    dataFvMatchField(element, attribute) {\n      const matchOtherFieldID = element.getAttribute(attribute);\n      const otherField = document.getElementById(matchOtherFieldID);\n      if (otherField === null) {\n        throw new Error(`Expected an element with an ID equal to \"${matchOtherFieldID}\" on this form.`);\n      }\n\n      const trimmedVal = element.value.trim();\n      const otherFieldTrimmedVal = otherField.value.trim();\n      const valid = (trimmedVal === otherFieldTrimmedVal);\n\n      if (parseInt(otherField.getAttribute('data-fv-required')) === 1) {\n        // Set the valid flag on the matched field\n        const setValidationFlagEvent = new CustomEvent(\n          this.getSetValidationFlagEventName(),\n          { bubbles: true, cancelable: true, detail: { validAfterRuleCheck: valid } }\n        );\n        otherField.dispatchEvent(setValidationFlagEvent);\n      }\n\n      return valid;\n    }\n  })\n  .init(function() {\n\n    /**\n     * The default, pre-defined rules Formation will check during validation\n     * of text-based input elements.\n     *\n     * @private\n     * @access      private\n     * @type        Array\n     * @memberOf    {Formation.textDefaultRules}\n     */\n    let __rules = [\n      ruleStamp({\n        name : 'default',\n        callback : (element, attribute) => this.dataFvDefault(element, attribute)\n      }),\n      ruleStamp({\n        name : 'min-length',\n        callback : (element, attribute) => this.dataFvMinLength(element, attribute)\n      }),\n      ruleStamp({\n        name : 'max-length',\n        callback : (element, attribute) => this.dataFvMaxLength(element, attribute)\n      }),\n      ruleStamp({\n        name : 'format',\n        callback : (element, attribute) => this.dataFvFormat(element, attribute)\n      }),\n      ruleStamp({\n        name : 'match-field',\n        callback : (element, attribute) => this.dataFvMatchField(element, attribute)\n      })\n    ];\n\n    /**\n     * Return the value of the private `__rules` object.\n     *\n     * @access      public\n     * @memberOf    {Formation.textDefaultRules}\n     *\n     * @returns     {Array}     __rules     The default rules we've defined.\n     */\n    this.getRules = () => __rules;\n  });\n\nmodule.exports = ruleSetStamp.compose(textDefaultRulesStamp);\n","'use strict';\n\nconst eventDefinitionsStamp = require('../event-handlers/event-definitions-stamp');\nconst stampit = require('stampit');\n\n/**\n * Formation-specific DOM navigation and modification.\n *\n * @copyright     Copyright (c) 2016 - 2018, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.domNavigation\n * @mixin         Formation.domNavigation\n *\n * @mixes         Formation.eventDefinitions\n */\nconst domNavigationStamp = stampit()\n  .refs({\n\n    /**\n     * The element DOM attribute key which specifies whether a form is managed\n     * by Formation (1) or not (0).\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     data-fv-valid\n     */\n    formationDataAttrKey : 'data-formation',\n\n    /**\n     * The element DOM attribute key which specifies whether the element\n     * is valid (1) or not (0).\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     data-fv-valid\n     */\n    validAttrKey : 'data-fv-valid',\n\n    /**\n     * The element DOM attribute key which specifies an `input` element \"linked\" to another.\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     data-fv-linked-input\n     */\n    linkedInputAttrKey : 'data-fv-linked-input',\n\n    /**\n     * The element DOM attribute key which specifies whether to clear the value\n     * of the element when it is hidden (1) or not (0).\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     data-fv-toggle-override-text\n     */\n    toggleOverrideTextAttrKey : 'data-fv-toggle-override-text',\n\n    /**\n     * The element DOM attribute key which specifies a group of input elements\n     * by the set's name (eg checkboxes or radios with the same name).\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     data-fv-group-container\n     */\n    groupedElementsContainerAttrKey : 'data-fv-group-container',\n\n    /**\n     * The Bootstrap stateful element attribute whose value is used for setting the element's innerHTML\n     * when set to the 'loading' state.\n     *\n     * @access      public\n     * @type        String\n     * @memberOf    {Formation.domNavigation}\n     * @default     data-fv-submitting\n     */\n    submittingStateDataKey : 'data-fv-submitting',\n\n    /**\n     * The CSS selector used to find the form's optional input elements.\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     [data-fv-optional=\"1\"]\n     */\n    optionalFieldsSelector : '[data-fv-optional=\"1\"]',\n\n    /**\n     * The CSS selector used to find the form's required input elements.\n     *\n     * @access      public\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     [data-fv-required=\"1\"]\n     */\n    requiredFieldsSelector : '[data-fv-required=\"1\"]',\n\n    /**\n     * The CSS selector used to find the form's submit button element.\n     *\n     * @access      private\n     * @type        {String}\n     * @memberOf    {Formation.domNavigation}\n     * @default     [data-fv-form-submit]\n     */\n    submitButtonSelector : '[data-fv-form-submit]'\n  })\n  .methods({\n\n    /**\n     * Construct a CSS selector used to find Formation forms.\n     *\n     * @access      public\n     * @memberOf    {Formation.formation}\n     * @mixes       {Formation.formation}\n     *\n     * @returns     {String}\n     */\n    getFormationSelector() {\n      return `[${this.formationDataAttrKey}=\"1\"]`;\n    },\n\n    /**\n     * Ascends the ancestor tree of `element` until it matches the supplied `selector`.\n     *\n     * If no matching element is found, returns null; otherwise returns the matched element.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}     element       The element whose ancestors we want to ascend. Required.\n     * @param       {String}      selector      The CSS selector to match against the ancestors. Required.\n     *\n     * @returns     {Element|null}\n     */\n    closest(element, selector) {\n      if (element.nodeType !== element.ELEMENT_NODE ||\n          element.tagName.toLowerCase() === 'html') {\n        return null;\n      }\n      if (element.matches(selector)) {\n        return element;\n      }\n\n      const parent = element.parentNode;\n      if (parent === null) {\n        return null;\n      }\n\n      return this.closest(parent, selector);\n    },\n\n    /**\n     * Return the `form` element in which `element` resides.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}    element      A `Form` element.\n     *\n     * @returns     {Element|null}            The form the supplied `element` is in, or null if not found.\n     */\n    findCurrentFormByTarget(element) {\n      if (element.tagName.toLowerCase() === 'form' && element.matches(this.getFormationSelector())) {\n        return element;\n      }\n\n      return this.closest(element, this.getFormationSelector());\n    },\n\n    /**\n     * Find the required fields in the specified `form` element.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}               form                The `form` element. Required.\n     *\n     * @returns     {Array}                 The set of required fields in the form.\n     */\n    findRequiredFields(form) {\n      return Array.from(form.querySelectorAll(this.requiredFieldsSelector));\n    },\n\n    /**\n     * Find the optional fields in the specified `form` element.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}               form               The `form` element. Required.\n     *\n     * @returns     {Array}                 The set of optional fields in the form.\n     */\n    findOptionalFields(form) {\n      return Array.from(form.querySelectorAll(this.optionalFieldsSelector));\n    },\n\n    /**\n     * Find the Formation submit button in the specified `form` element.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}               form               The `form` element. Required.\n     *\n     * @returns     {Array}                 The Formation submit button in the form.\n     */\n    findSubmitButton(form) {\n      return Array.from(form.querySelectorAll(this.submitButtonSelector));\n    },\n\n    /**\n     * Check whether `element` is a custom Formation Bootstrap Radio or Checkbox widget.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}     element           The `form` element. Required.\n     *\n     * @returns     {Boolean}     tbr               Whether the element is a custom widget.\n     */\n    elementIsCustomRadioOrCheckboxWidget(element) {\n      const currentForm = this.findCurrentFormByTarget(element);\n      if (currentForm === null) {\n        return false;\n      }\n\n      return (element.classList.contains('btn-checkbox') || element.classList.contains('btn-radio'));\n    },\n\n    /**\n     * Find the DOM element which acts as a container for a set of input elements\n     * with the same name as `element`.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       element        The element whose container we want to find. Required.\n     *\n     * @returns     {Element|null}\n     */\n    getCheckboxOrRadioContainer(element) {\n      const currentForm = this.findCurrentFormByTarget(element);\n      if (currentForm === null) { return null; }\n\n      return currentForm.querySelector(`[${this.groupedElementsContainerAttrKey}=\"${element.getAttribute('name')}\"]`);\n    },\n\n    /**\n     * Find all input elements in the current form with the same name as `element`.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       element        The element whose name we want to find all elements for. Required.\n     *\n     * @returns     {Array}\n     */\n    getAllCheckboxesOrRadiosByName(element) {\n      const currentForm = this.findCurrentFormByTarget(element);\n      if (currentForm === null) { return []; }\n\n      return Array.from(currentForm.querySelectorAll(`input[name=\"${element.getAttribute('name')}\"]`));\n    },\n\n    /**\n     * Find the `label` element in the DOM for the supplied `input` element.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       input      The source element used to find a `label` element. Required.\n     *\n     * @returns     {Array}\n     */\n    getInputElementLabel(input) {\n      const currentForm = this.findCurrentFormByTarget(input);\n      if (currentForm === null) { return []; }\n\n      return Array.from(currentForm.querySelectorAll(`label[for=\"${input.getAttribute('id')}\"]`));\n    },\n\n    /**\n     * Find the element in the DOM linked to `source` and return it.\n     *\n     * @throws      Error                       iff the linked element is not found in the DOM when expected\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       source      The source element used to find a linked element. Required.\n     *\n     * @returns     {Element|null}  tbr         The linked element if found, null otherwise.\n     */\n    getLinkedElement(source) {\n      if (! source.hasAttribute(this.linkedInputAttrKey)) {\n        return null;\n      }\n\n      const linkedElementID = source.getAttribute(this.linkedInputAttrKey);\n      const linkedElement = document.getElementById(linkedElementID);\n      if (linkedElement === null) {\n        throw new Error(\n          `Expected an element with a \\`${this.linkedInputAttrKey}\\` attribute equal to \"${linkedElementID}\".`\n        );\n      }\n\n      return linkedElement;\n    },\n\n    /**\n     * Will enable or disable the `element` based on the `enable` param.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       element         The element to enable or disable. Required.\n     * @param       {Boolean}       enable          Whether to enable (true) or disable (false) the `element`. Required.\n     *\n     * @returns     {Formation.domNavigation}\n     */\n    enableOrDisableElement(element, enable) {\n      if (enable) {\n        element.removeAttribute('disabled');\n        element.classList.remove('disabled');\n      }\n      else {\n        element.setAttribute('disabled', 'disabled');\n        element.classList.add('disabled');\n      }\n\n      return this;\n    },\n\n    /**\n     * Will add or remove the `hidden` class of the `element` based on the `show` param.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       element         The element to show or hide. Required.\n     * @param       {Boolean}       show            Whether to show (true) or hide (false) the `element`. Required.\n     *\n     * @returns     {Formation.domNavigation}\n     */\n    showOrHideElement(element, show) {\n      element.classList.toggle('hidden', !show);\n\n      return this;\n    },\n\n    /**\n     * Will show or hide the element linked to `element` based on the `show` param.\n     * Handles when the linked element is in a Bootstrap `form-group`, as well as\n     * when it is not.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       element         The element to show or hide. Required.\n     * @param       {Boolean}       show            Whether to show (true) or hide (false) the `element`. Required.\n     *\n     * @returns     {Formation.domNavigation}\n     */\n    showOrHideLinkedElement(element, show) {\n      const linkedElement = this.getLinkedElement(element);\n      if (linkedElement === null) {\n        return this;\n      }\n      const linkedInputFormGroup = this.closest(linkedElement, '.form-group');\n\n      // The linked input may be part of a form group which contains other elements that need to be shown\n      // or hidden along with the linked element. If that's the case, the 'hidden' class only applies\n      // to the form group. If that's not the case, the linked element itself applies the 'hidden' class.\n      const hasFormGroup = (linkedInputFormGroup !== null);\n      if (hasFormGroup) {\n        this.showOrHideElement(linkedInputFormGroup, show);\n      }\n\n      // show and enable, or hide and disable, the linkedElement.\n      this.enableOrDisableLinkedElement(linkedElement, show, !hasFormGroup);\n\n      return this;\n    },\n\n    /**\n     * Convenience method which, for the supplied `linkedElement`, shows and enables\n     * it, or hides and disables it, based on the params.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param\t      {Element}     linkedElement         Text-based `input` or `textarea` field. Required.\n     * @param       {Boolean}     enableAndShow         Flag indicating whether to show/enable, or hide/disable, the element. Required.\n     * @param       {Boolean}     elementHandlesHidden  Flag indicating whether the element handles its hidden/shown status. Required.\n     *\n     * @returns     {Formation.domNavigation}\n     */\n    enableOrDisableLinkedElement(linkedElement, enableAndShow, elementHandlesHidden) {\n      if (enableAndShow) {\n        this.showEnableLinkedElement(linkedElement, elementHandlesHidden);\n      }\n      else {\n        this.hideDisableLinkedElement(linkedElement, elementHandlesHidden);\n      }\n\n      return this;\n    },\n\n    /**\n     * Convenience method which, for the supplied `element`, removes the `disabled` property,\n     * and removes the Twitter Bootstrap class of \"disabled\". If the `includeHidden` parameter\n     * is specified and is `true`, also removes the \"hidden\" class from the element.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param\t      {Element}     element           Text-based `input` or `textarea` field. Required.\n     * @param       {Boolean}     removeHidden      Flag indicating whether to remove the 'hidden' class. Required.\n     *\n     * @returns     {Formation.domNavigation}\n     */\n    showEnableLinkedElement(element, removeHidden) {\n      this.enableOrDisableElement(element, true);\n      if (removeHidden) {\n        this.showOrHideElement(element, true);\n      }\n\n      return this;\n    },\n\n    /**\n     * Convenience method which, for the supplied `element`, disables it and gives it the\n     * Twitter Bootstrap class of \"disabled\". If the `includeHidden` parameter is\n     * specified and is `true`, also adds the \"hidden\" class to the element. By default\n     * it will clear the value of the text input and set the `data-fv-valid` attribute to 0 (false),\n     * unless the `data-fv-toggle-override-text` is set on the linked input with a value of 0.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}     element           Text-based `input` or `textarea` field. Required.\n     * @param       {Boolean}     includeHidden     Flag indicating whether to add the 'hidden' class. Required.\n     *\n     * @returns     {Formation.domNavigation}\n     */\n    hideDisableLinkedElement(element, includeHidden) {\n      const clearValue = (\n        ! element.hasAttribute(this.toggleOverrideTextAttrKey) ||\n        parseInt(element.getAttribute(this.toggleOverrideTextAttrKey)) === 1\n      );\n      if (clearValue) {\n        element.value = '';\n        const validationEvent = new CustomEvent(\n          this.getSetValidationFlagEventName(),\n          { bubbles: true, cancelable: true, detail: { valid: false } }\n        );\n        element.dispatchEvent(validationEvent);\n      }\n\n      this.enableOrDisableElement(element, false);\n      if (includeHidden) {\n        this.showOrHideElement(element, false);\n      }\n\n      return this;\n    },\n\n    /**\n     * Helper function to filter an array of elements to return only those that are\n     * not hidden nor disabled.\n     *\n     * @access      public\n     * @memberOf    {Formation.domNavigation}\n     * @mixes       {Formation.domNavigation}\n     *\n     * @param       {Element}       element       The DOM element to check.\n     *\n     * @returns     {Boolean}\n     */\n    visibleEnabledFilter(element) {\n      const hiddenOrDisabled = (\n        element.classList.contains('hidden') ||\n        element.getAttribute('disabled') === \"disabled\" ||\n        element.classList.contains('disabled')\n      );\n      return (! hiddenOrDisabled);\n    }\n  });\n\nmodule.exports = domNavigationStamp.compose(eventDefinitionsStamp);\n","'use strict';\n\nconst stampit = require('stampit');\nconst EventEmitter = require('events').EventEmitter;\n\n/**\n * Turn a node `EventEmitter` into a Stamp.\n *\n * @copyright     Copyright (c) 2016, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.eventEmitter\n * @mixin         Formation.eventEmitter\n */\nconst eventEmitterStamp = stampit.convertConstructor(EventEmitter);\n\n/**\n * Provides an interface for defining Formation Node events.\n *\n * @copyright     Copyright (c) 2016, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.eventEmitterEvents\n * @mixin         Formation.eventEmitterEvents\n *\n * @mixes         Formation.eventEmitter\n */\nconst eventEmitterEventsStamp = stampit()\n  .init(function() {\n\n    /**\n     * The node event name for turning debug on or off.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventEmitterEvents}\n     */\n    const __nodeSetDebugEventName = 'formationSetDebug';\n\n    /**\n     * Return the value of the private `__nodeSetDebugEventName` flag.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventEmitterEvents}\n     *\n     * @returns     {String}        __nodeSetDebugEventName\n     */\n    this.getNodeSetDebugEvent = () => {\n      return __nodeSetDebugEventName;\n    };\n\n    /**\n     * The node event name for when a form is submitted.\n     *\n     * @private\n     * @access      private\n     * @const\n     * @type        {String}\n     * @memberOf    {Formation.eventEmitterEvents}\n     */\n    const __nodeFormSubmitEventName = 'formationFormSubmit';\n\n    /**\n     * Return the value of the private `__nodeFormSubmitEventName` flag.\n     *\n     * @access      public\n     * @memberOf    {Formation.eventEmitterEvents}\n     *\n     * @returns     {String}        __nodeFormSubmitEventName\n     */\n    this.getNodeFormSubmitEvent = () => {\n      return __nodeFormSubmitEventName;\n    };\n  });\n\nmodule.exports = eventEmitterEventsStamp.compose(eventEmitterStamp);\n","'use strict';\n\nlet stampit = require('stampit');\n\n/**\n * A set of methods to check common sting types (eg phone numbers, email addresses, numbers)\n * for validity.\n *\n * @copyright     Copyright (c) 2016, Derek Rosenzweig\n * @author        Derek Rosenzweig <derek.rosenzweig@gmail.com>\n * @package       Formation\n * @namespace     Formation.validityCheck\n * @mixin         Formation.validityCheck\n */\nconst validityCheckStamp = stampit()\n  .methods({\n    /**\n     * Returns true iff the string only contains numeric values.\n     *\n     * @access      public\n     * @memberOf    {Formation.validityCheck}\n     *\n     * @param       {String}        strToTest   The string to test. Required.\n     *\n     * @returns     {Boolean}                   Flag indicating whether the string only contains numbers.\n     */\n    isValidNumeric(strToTest) {\n      let filter = /^(\\d*)$/;\n\n      return filter.test(strToTest);\n    },\n\n    /**\n     * Returns true iff the string is a ZIP code, or the specified part of a ZIP code.\n     *\n     * @access      public\n     * @memberOf    {Formation.validityCheck}\n     *\n     * @param       {String}        strToTest   The string to test. Required.\n     * @param       {int|null}      part        The part of ZIP code to check. Optional. Default null.\n     *\n     * @returns     {Boolean}                   Flag indicating whether the string only contains numbers.\n     */\n    isValidZip(strToTest, part = null) {\n      // satisfies `12345` and `12345-1234`\n      let filter = /^(\\d{5})((\\-(\\d{4}))?)$/;\n\n      if (part === 4) {\n        filter = /^(\\d{4})$/;\n      }\n      else if (part === 5) {\n        filter = /^(\\d{5})$/;\n      }\n\n      return filter.test(strToTest);\n    },\n\n    /**\n     * Returns true if the string matches the format of an email address. Returns false otherwise.\n     *\n     * @access      public\n     * @memberOf    {Formation.validityCheck}\n     *\n     * @param       {String}        strToTest   The string to test. Required.\n     *\n     * @returns     {Boolean}                   Flag indicating whether the string is a valid email address.\n     */\n    isValidEmail(strToTest) {\n      let filter = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i;\n\n      return filter.test(strToTest);\n    },\n\n    /**\n     * Returns true if the string matches the format `(xxx) xxx-xxxx` where `x` is\n     * a number [0-9]. If the `multi` param is true, allows the formats `xxxxxxxxxx`\n     * and `xxx-xxx-xxxx` as well. Returns false otherwise.\n     *\n     * @access      public\n     * @memberOf    {Formation.validityCheck}\n     *\n     * @param       {String}        strToTest   The string to test. Required.\n     * @param       {Boolean}       multi       Flag indicating whether to allow multiple formats. Optional. False.\n     *\n     * @returns     {Boolean}                   Flag indicating whether the string is a valid phone number.\n     */\n    isValidPhone(strToTest, multi = false) {\n      let filter = /^\\((\\d{3})\\)(\\s)(\\d{3})-(\\d{4})$/;\n      if (multi) {\n        filter = /^(\\d{10})|(\\((\\d{3})\\)(\\s)(\\d{3})-(\\d{4}))|((\\d{3})-(\\d{3})-(\\d{4}))$/;\n      }\n\n      return filter.test(strToTest);\n    }\n  });\n\nmodule.exports = validityCheckStamp;\n"],"sourceRoot":""}